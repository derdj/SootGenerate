/* Copyright (c) 2011, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * JLS $5.1.9
 *
 * Add unchecked conversion warnings to the type checking
 * of assignments, declaration initializers and cast expressions.
 *
 * TODO: The unchecked conversion warning can be suppressed with
 * the SuppressWarnings annotation.
 */
aspect UncheckedConversion {
  public void VariableDeclaration.checkWarnings() {
    if (hasInit() && !suppressWarnings("unchecked")) {
      checkUncheckedConversion(getInit().type(), type());
    }
  }

  public void FieldDeclaration.checkWarnings() {
    if (hasInit() && !suppressWarnings("unchecked")) {
      checkUncheckedConversion(getInit().type(), type());
    }
  }

  public void AssignSimpleExpr.checkWarnings() {
    if (!withinSuppressWarnings("unchecked")) {
      checkUncheckedConversion(getSource().type(), getDest().type());
    }
  }

  public void CastExpr.checkWarnings() {
    if (!withinSuppressWarnings("unchecked")) {
      checkUncheckedConversion(getExpr().type(), getTypeAccess().type());
    }
  }

  public void ASTNode.checkUncheckedConversion(TypeDecl source, TypeDecl dest) {
    if (source.isUncheckedConversionTo(dest)) {
      warning("unchecked conversion from raw type " + source.typeName()
          + " to generic type " + dest.typeName());
    }
  }

  /**
   * An unchecked conversion occurs when converting from a
   * raw type G to a generic type G<T1, ..., Tn>.
   */
  syn boolean TypeDecl.isUncheckedConversionTo(TypeDecl dest) =
      (!dest.isRawType()) && this.isRawType();
}
