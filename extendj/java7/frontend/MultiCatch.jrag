/* Copyright (c) 2011, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect MultiCatch {

  /**
   * Inherit the lookupVariable attribute.
   */
  inh SimpleSet CatchParameterDeclaration.lookupVariable(String name);

  CatchParameterDeclaration implements Variable;
  syn boolean CatchParameterDeclaration.isParameter() = true;

  // 4.5.3
  syn boolean CatchParameterDeclaration.isClassVariable() = false;
  syn boolean CatchParameterDeclaration.isInstanceVariable() = false;
  inh boolean CatchParameterDeclaration.isMethodParameter();
  inh boolean CatchParameterDeclaration.isConstructorParameter();
  inh boolean CatchParameterDeclaration.isExceptionHandlerParameter();
  syn boolean CatchParameterDeclaration.isLocalVariable() = false;

  eq MultiCatch.getParameter().isMethodParameter() = false;
  eq MultiCatch.getParameter().isConstructorParameter() = false;
  eq MultiCatch.getParameter().isExceptionHandlerParameter() = true;

  /**
   * The catch parameter of a multi-catch clause is implicitly final.
   */
  syn boolean CatchParameterDeclaration.isFinal() = true;
  syn boolean CatchParameterDeclaration.isVolatile() = getModifiers().isVolatile();
  syn boolean CatchParameterDeclaration.isBlank() = false;
  syn boolean CatchParameterDeclaration.isStatic() = false;

  syn String CatchParameterDeclaration.name() = getID();

  syn boolean CatchParameterDeclaration.hasInit() = false;
  syn Expr CatchParameterDeclaration.getInit() {
    throw new UnsupportedOperationException();
  }
  syn Constant CatchParameterDeclaration.constant() {
    throw new UnsupportedOperationException();
  }

  inh TypeDecl CatchParameterDeclaration.hostType();
  syn boolean CatchParameterDeclaration.isSynthetic() = getModifiers().isSynthetic();

  /**
   * @see "Generics.jrag"
   */
  eq CatchParameterDeclaration.sourceVariableDecl() = this;

  // Name lookup

  // CatchParameterDeclaration is a SimpleSet
  CatchParameterDeclaration implements SimpleSet;
  syn int CatchParameterDeclaration.size() = 1;
  syn boolean CatchParameterDeclaration.isEmpty() = false;
  public SimpleSet CatchParameterDeclaration.add(Object o) {
    return new SimpleSetImpl().add(this).add(o);
  }
  syn boolean CatchParameterDeclaration.contains(Object o) = this == o;
  public boolean CatchParameterDeclaration.isSingleton() { return true; }
  public boolean CatchParameterDeclaration.isSingleton(Object o) { return contains(o); }

  CatchParameterDeclaration implements Iterator;
  private CatchParameterDeclaration CatchParameterDeclaration.iterElem;
  public Iterator CatchParameterDeclaration.iterator() { iterElem = this; return this; }
  public boolean CatchParameterDeclaration.hasNext() { return iterElem != null; }
  public Object CatchParameterDeclaration.next() { Object o = iterElem; iterElem = null; return o; }
  public void CatchParameterDeclaration.remove() { throw new UnsupportedOperationException(); }

  /**
   * Variable lookup in catch parameter scope.
   */
  eq MultiCatch.getParameter().lookupVariable(String name) = parameterDeclaration(name);

  /**
   * Variable lookup in catch parameter scope.
   */
  eq MultiCatch.parameterDeclaration(String name) =
      getParameter().name().equals(name) ? getParameter() : SimpleSet.emptySet;

  /**
   * Syntactic classification
   */
  eq CatchParameterDeclaration.getTypeAccess(int i).nameType() = NameType.TYPE_NAME;

  eq MultiCatch.handles(TypeDecl exceptionType) {
    CatchParameterDeclaration param = getParameter();
    for (int i = 0; i < param.getNumTypeAccess(); ++i) {
      TypeDecl type = param.getTypeAccess(i).type();
      if (!type.isUnknown() && exceptionType.instanceOf(type)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Type checking.
   * The types given in a disjunction type may not be
   * subtypes of each other.
   */
  public void CatchParameterDeclaration.typeCheck() {
    boolean pass = true;
    for (int i = 0; i < getNumTypeAccess(); ++i) {
      for (int j = 0; j < getNumTypeAccess(); ++j) {
        if (i == j) {
          continue;
        }
        TypeDecl t1 = getTypeAccess(i).type();
        TypeDecl t2 = getTypeAccess(j).type();
        if (t2.instanceOf(t1)) {
          errorf("%s is a subclass of %s, which is not allowed in multi-catch type alternatives",
              t2.fullName(), t1.fullName());
          pass = false;
        }
      }
    }
  }

  /**
   * Reachability checking for multi-catch.
   */
  eq MultiCatch.getBlock().reachable() {
    boolean anyReachable = false;
    CatchParameterDeclaration param = getParameter();
    for (int i = 0; i < param.getNumTypeAccess(); ++i) {
      TypeDecl type = param.getTypeAccess(i).type();
      if (!reachableCatchClause(type)) {
        errorf("The exception type %s can not be caught by this multi-catch clause",
            type.fullName());
      } else {
        anyReachable = true;
      }
    }
    return anyReachable;
  }

  inh LUBType CatchParameterDeclaration.lookupLUBType(Collection bounds);

  /**
   * A catch parameter declared with a disjunction type has the
   * effective type lub(t1, t2, ...)
   *
   * @see "JLSv3 &sect;15.12.2.7"
   */
  syn TypeDecl CatchParameterDeclaration.type() {
    ArrayList<TypeDecl> list = new ArrayList<TypeDecl>();
    for (int i = 0; i < getNumTypeAccess(); i++)
      list.add(getTypeAccess(i).type());
    return lookupLUBType(list).lub();
  }

  inh VariableScope CatchParameterDeclaration.outerScope();
  inh BodyDecl CatchParameterDeclaration.enclosingBodyDecl();

  /**
   * Duplicate declaration checking for catch parameters.
   */
  public void CatchParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of catch parameter %s", name());
    }
  }

  refine NameCheck
  public void ParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of parameter %s", name());
    }
  }

  refine NameCheck
  public void VariableDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl != this && decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      }
      // 8.4.1
      else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      }
    }
    if (getParent().getParent() instanceof Block) {
      Block block = (Block) getParent().getParent();
      for (int i = 0; i < block.getNumStmt(); i++) {
        if (block.getStmt(i) instanceof Variable) {
          Variable v = (Variable) block.getStmt(i);
          if (v.name().equals(name()) && v != this) {
            errorf("duplicate declaration of local variable %s", name());
          }
        }
      }
    }
  }
}
