/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


aspect TypeCheck {
  public void ASTNode.typeCheck() {
  }

  syn boolean Expr.isVariable() = false;
  eq AbstractDot.isVariable() = lastAccess().isVariable();
  eq VarAccess.isVariable() = true;
  eq ArrayAccess.isVariable() = true;
  eq ParExpr.isVariable() = getExpr().isVariable();

  // 5.2
  public void VariableDeclaration.typeCheck() {
    if (hasInit()) {
      TypeDecl source = getInit().type();
      TypeDecl dest = type();
      if (!source.assignConversionTo(dest, getInit())) {
        errorf("can not assign variable %s of type %s a value of type %s",
            name(), dest.typeName(), source.typeName());
      }
    }
  }

  // 5.2
  public void FieldDeclaration.typeCheck() {
    if (hasInit()) {
      TypeDecl source = getInit().type();
      TypeDecl dest = type();
      if (!source.assignConversionTo(dest, getInit())) {
        errorf("can not assign field %s of type %s a value of type %s",
            name(), dest.typeName(), source.typeName());
      }
    }
  }

  // 5.2 Assignment Conversion
  public void AssignSimpleExpr.typeCheck() {
    if (!getDest().isVariable()) {
      error("left hand side is not a variable");
    } else if (!getSource().type().assignConversionTo(getDest().type(), getSource())
        && !getSource().type().isUnknown()) {
      errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName());
    }
  }

  public void AssignExpr.typeCheck() {
    if (!getDest().isVariable()) {
      error("left hand side is not a variable");
    } else {
      TypeDecl source = getSource().type();
      TypeDecl dest = getDest().type();
      if (getSource().type().isPrimitive() && getDest().type().isPrimitive()) {
        return;
      }
      errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName());
    }
  }

  public void AssignMultiplicativeExpr.typeCheck() {
    if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      error("Multiplicative operators do not operate on boolean types");
    }
    super.typeCheck();
  }

  public void AssignPlusExpr.typeCheck() {
    if (!getDest().isVariable()) {
      error("left hand side is not a variable");
    } else if (getSource().type().isUnknown() || getDest().type().isUnknown()) {
      return;
    } else if (getDest().type().isString() && !(getSource().type().isVoid())) {
      return;
    } else if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      error("Operator + does not operate on boolean types");
    } else if (getSource().type().isPrimitive() && getDest().type().isPrimitive()) {
      return;
    } else
      errorf("can not assign %s of type %s a value of type %s",
          getDest().prettyPrint(), getDest().type().typeName(), getSource().type().typeName());
  }
  public void AssignMinusExpr.typeCheck() {
    if (getSource().type().isBoolean() || getDest().type().isBoolean()) {
      error("Operator - does not operate on boolean types");
    }
    super.typeCheck();
  }

  public void AssignShiftExpr.typeCheck() {
    if (!getSource().type().isIntegralType() || !getDest().type().isIntegralType()) {
      error("Shift operators only operate on integral types");
    }
    super.typeCheck();
  }

  public void AssignBitwiseExpr.typeCheck() {
    TypeDecl source = getSource().type();
    TypeDecl dest = getDest().type();
    if (source.isIntegralType() && dest.isIntegralType()) {
      super.typeCheck();
    } else if (source.isBoolean() && dest.isBoolean()) {
      super.typeCheck();
    } else {
      error("Operator only operates on integral and boolean types");
    }
  }

  // 5.3 Method Invocation Conversion
  public void MethodAccess.typeCheck() {
    for (int i = 0; i < getNumArg(); ++i) {
      if (getArg(i).type().isVoid()) {
        errorf("expression '%s' has type void and is not a valid method argument",
            getArg(i).prettyPrint());
      }
    }
    for (int i = 0; i < decl().getNumParameter(); i++) {
      TypeDecl exprType = getArg(i).type();
      TypeDecl parmType = decl().getParameter(i).type();
      if (!exprType.methodInvocationConversionTo(parmType)
          && !exprType.isUnknown() && !parmType.isUnknown()) {
        errorf("argument '%s' of type %s is not compatible with the method parameter type %s",
            getArg(i).prettyPrint(), exprType.typeName(), parmType.typeName());
      }
    }
  }

  // 15.13
  public void ArrayAccess.typeCheck() {
    if (isQualified() && !qualifier().type().isArrayDecl() && !qualifier().type().isUnknown()) {
      errorf("the type %s of the indexed element is not an array", qualifier().type().name());
    }
    if (!getExpr().type().unaryNumericPromotion().isInt() || !getExpr().type().isIntegralType()) {
      errorf("array index must be int after unary numeric promotion which %s is not",
          getExpr().type().typeName());
    }
  }

  public void ArrayInit.typeCheck() {
    TypeDecl initializerType = declType().componentType();
    if (initializerType.isUnknown()) {
      error("the dimension of the initializer is larger than the expected dimension");
    }
    for (int i = 0; i < getNumInit(); i++) {
      Expr e = getInit(i);
      if (!e.type().assignConversionTo(initializerType, e)) {
        errorf("the type %s of the initializer is not compatible with %s",
            e.type().name(), initializerType.name());
      }
    }
  }

  // 15.17
  public void MultiplicativeExpr.typeCheck() {
    if (!getLeftOperand().type().isNumericType()) {
      errorf("%s is not numeric", getLeftOperand().type().typeName());
    }
    if (!getRightOperand().type().isNumericType()) {
      errorf("%s is not numeric", getRightOperand().type().typeName());
    }
  }

  // 15.18
  public void AdditiveExpr.typeCheck() {
    if (!getLeftOperand().type().isNumericType()) {
      errorf("%s is not numeric", getLeftOperand().type().typeName());
    }
    if (!getRightOperand().type().isNumericType()) {
      errorf("%s is not numeric", getRightOperand().type().typeName());
    }
  }

  // 15.18
  public void AddExpr.typeCheck() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (!left.isString() && !right.isString()) {
      super.typeCheck();
    } else if (left.isVoid()) {
      error("The type void of the left hand side is not numeric");
    } else if (right.isVoid()) {
      error("The type void of the right hand side is not numeric");
    }
  }

  // 15.19
  public void ShiftExpr.typeCheck() {
    if (!getLeftOperand().type().isIntegralType()) {
      errorf("%s is not integral", getLeftOperand().type().typeName());
    }
    if (!getRightOperand().type().isIntegralType()) {
      errorf("%s is not integral", getRightOperand().type().typeName());
    }
  }

  // 15.22
  public void BitwiseExpr.typeCheck() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (left.isIntegralType() && right.isIntegralType()) {
      return;
    } else if (left.isBoolean() && right.isBoolean()) {
      return;
    } else {
      errorf("%s is not compatible with %s", left.typeName(), right.typeName());
    }
  }

  // 15.20
  public void RelationalExpr.typeCheck() {
    if (!getLeftOperand().type().isNumericType()) {
      errorf("%s is not numeric", getLeftOperand().type().typeName());
    }
    if (!getRightOperand().type().isNumericType()) {
      errorf("%s is not numeric", getRightOperand().type().typeName());
    }
  }

  // 15.23, 15.24
  public void LogicalExpr.typeCheck() {
    if (!getLeftOperand().type().isBoolean()) {
      errorf("%s is not boolean", getLeftOperand().type().typeName());
    }
    if (!getRightOperand().type().isBoolean()) {
      errorf("%s is not boolean", getRightOperand().type().typeName());
    }
  }

  // 15.21
  public void EqualityExpr.typeCheck() {
    TypeDecl left = getLeftOperand().type();
    TypeDecl right = getRightOperand().type();
    if (left.isNumericType() && right.isNumericType()) {
      return;
    } else if (left.isBoolean() && right.isBoolean()) {
      return;
    } else if ((left.isReferenceType() || left.isNull()) && (right.isReferenceType() || right.isNull())) {
      if (left.castingConversionTo(right) || right.castingConversionTo(left)) {
        return;
      }
    }
    errorf("%s can not be compared to %s", left.typeName(), right.typeName());
  }

  // 15.20.2
  public void InstanceOfExpr.typeCheck() {
    TypeDecl relationalExpr = getExpr().type();
    TypeDecl referenceType = getTypeAccess().type();
    if (!relationalExpr.isUnknown()) {
      if (!relationalExpr.isReferenceType() && !relationalExpr.isNull()) {
        error("The relational expression in instance of must be reference or null type");
      }
      if (!referenceType.isReferenceType()) {
        error("The reference expression in instance of must be reference type");
      }
      if (!relationalExpr.castingConversionTo(referenceType)) {
        errorf("The type %s of the relational expression %s can not be cast into the type %s",
            relationalExpr.typeName(), getExpr().prettyPrint(), referenceType.typeName());
      }
      if (getExpr().isTypeAccess()) {
        errorf("The relational expression %s must not be a type name", getExpr().prettyPrint());
      }
    }
  }

  // 15.16
  public void CastExpr.typeCheck() {
    TypeDecl expr = getExpr().type();
    TypeDecl type = getTypeAccess().type();
    if (!expr.isUnknown()) {
      if (!expr.castingConversionTo(type)) {
        errorf("%s can not be cast into %s", expr.typeName(), type.typeName());
      }
      if (!getTypeAccess().isTypeAccess()) {
        errorf("%s is not a type access in cast expression", getTypeAccess().prettyPrint());
      }
    }
  }

  public void ParExpr.typeCheck() {
    if (getExpr().isTypeAccess()) {
      errorf("%s is a type and may not be used in parenthesized expression", getExpr().prettyPrint());
    }
  }

  // 15.15.3
  public void PlusExpr.typeCheck() {
    if (!getOperand().type().isNumericType()) {
      error("unary plus only operates on numeric types");
    }
  }

  // 15.15.4
  public void MinusExpr.typeCheck() {
    if (!getOperand().type().isNumericType()) {
      error("unary minus only operates on numeric types");
    }
  }

  // 15.15.5
  public void BitNotExpr.typeCheck() {
    if (!getOperand().type().isIntegralType()) {
      error("unary ~ only operates on integral types");
    }
  }

  // 15.15.6
  public void LogNotExpr.typeCheck() {
    if (!getOperand().type().isBoolean()) {
      error("unary ! only operates on boolean types");
    }
  }

  // 15.14
  public void PostfixExpr.typeCheck() {
    if (!getOperand().isVariable()) {
      error("postfix expressions only work on variables");
    } else if (!getOperand().type().isNumericType()) {
      error("postfix expressions only operates on numeric types");
    }
  }

  // 15.15.1
  public void PreIncExpr.typeCheck() {
    if (!getOperand().isVariable()) {
      error("prefix increment expression only work on variables");
    } else if (!getOperand().type().isNumericType()) {
      error("unary increment only operates on numeric types");
    }
  }

  // 15.15.2
  public void PreDecExpr.typeCheck() {
    if (!getOperand().isVariable()) {
      error("prefix decrement expression only work on variables");
    } else if (!getOperand().type().isNumericType()) {
      error("unary decrement only operates on numeric types");
    }
  }

  public void IfStmt.typeCheck() {
    TypeDecl cond = getCondition().type();
    if (!cond.isBoolean()) {
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), cond.name());
    }
  }
  public void WhileStmt.typeCheck() {
    TypeDecl cond = getCondition().type();
    if (!cond.isBoolean()) {
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), cond.name());
    }
  }
  public void DoStmt.typeCheck() {
    TypeDecl cond = getCondition().type();
    if (!cond.isBoolean()) {
      errorf("the type of \"%s\" is %s which is not boolean",
          getCondition().prettyPrint(), cond.name());
    }
  }
  public void ForStmt.typeCheck() {
    if (hasCondition()) {
      TypeDecl cond = getCondition().type();
      if (!cond.isBoolean()) {
        errorf("the type of \"%s\" is %s which is not boolean",
            getCondition().prettyPrint(), cond.name());
      }
    }
  }

  public void SwitchStmt.typeCheck() {
    TypeDecl type = getExpr().type();
    if (!type.isIntegralType() || type.isLong()) {
      error("Switch expression must be of char, byte, short, or int");
    }
  }

  public void ConstCase.typeCheck() {
    TypeDecl switchType = switchType();
    TypeDecl type = getValue().type();
    if (!type.assignConversionTo(switchType, getValue())) {
      error("Constant expression must be assignable to Expression");
    }
    if (!getValue().isConstant() && !getValue().type().isUnknown()) {
      error("Switch expression must be constant");
    }
  }

  inh TypeDecl Case.switchType();
  eq SwitchStmt.getBlock().switchType() = getExpr().type();
  eq Program.getChild().switchType() = unknownType();

  public void SynchronizedStmt.typeCheck() {
    TypeDecl type = getExpr().type();
    if (!type.isReferenceType() || type.isNull()) {
      error("*** The type of the expression must be a reference");
    }
  }

  public void BasicCatch.typeCheck() {
    if (!getParameter().type().instanceOf(typeThrowable())) {
      error("*** The catch variable must extend Throwable");
    }
  }

  public void ThrowStmt.typeCheck() {
    if (!getExpr().type().instanceOf(typeThrowable())) {
      error("*** The thrown expression must extend Throwable");
    }
  }

  public void AssertStmt.typeCheck() {
    // 14.10
    if (!getCondition().type().isBoolean()) {
      error("Assert requires boolean condition");
    }
    if (hasMessage() && getMessage().type().isVoid()) {
      error("The detail message of an assert statement may not be void");
    }
  }

  public void MethodDecl.typeCheck() {
    // Thrown vs super class method see MethodDecl.nameCheck
    // 8.4.4
    TypeDecl exceptionType = typeThrowable();
    for (int i = 0; i < getNumException(); i++) {
      TypeDecl typeDecl = getException(i).type();
      if (!typeDecl.instanceOf(exceptionType)) {
        errorf("%s throws non throwable type %s", signature(), typeDecl.fullName());
      }
    }

    // check returns
    if (!isVoid() && hasBlock() && getBlock().canCompleteNormally()) {
      error("the body of a non void method may not complete normally");
    }

  }
  // 14.16
  inh TypeDecl TypeDecl.typeVoid();
  inh TypeDecl ReturnStmt.returnType();
  eq TypeDecl.getBodyDecl().returnType() = typeVoid();
  eq MethodDecl.getBlock().returnType() = type();
  eq Program.getChild().returnType() = typeVoid();

  public void ReturnStmt.typeCheck() {
    if (hasResult() && !returnType().isVoid()) {
      if (!getResult().type().assignConversionTo(returnType(), getResult())) {
        errorf("return value must be an instance of %s which %s is not",
            returnType().typeName(), getResult().type().typeName());
      }
    }
    // 8.4.5 8.8.5
    if (returnType().isVoid() && hasResult()) {
      error("return stmt may not have an expression in void methods");
    }
    // 8.4.5
    if (!returnType().isVoid() && !hasResult()) {
      error("return stmt must have an expression in non void methods");
    }
    if (enclosingBodyDecl() instanceof InstanceInitializer || enclosingBodyDecl() instanceof StaticInitializer) {
      error("Initializers may not return");
    }

  }

  public void ConstructorDecl.typeCheck() {
    // 8.8.4 (8.4.4)
    TypeDecl exceptionType = typeThrowable();
    for (int i = 0; i < getNumException(); i++) {
      TypeDecl typeDecl = getException(i).type();
      if (!typeDecl.instanceOf(exceptionType)) {
        errorf("%s throws non throwable type %s", signature(), typeDecl.fullName());
      }
    }
  }

  public void ClassInstanceExpr.typeCheck() {
    if (isQualified() && qualifier().isTypeAccess() && !qualifier().type().isUnknown()) {
      error("*** The expression in a qualified class instance expr must not be a type name");
    }
    // 15.9
    if (isQualified() && !type().isInnerClass() && !((ClassDecl) type()).superclass().isInnerClass() && !type().isUnknown()) {
      error("*** Qualified class instance creation can only instantiate inner classes and their anonymous subclasses");
    }
    if (!type().isClassDecl()) {
      errorf("*** Can only instantiate classes, which %s is not", type().typeName());
    }
    typeCheckEnclosingInstance();
    typeCheckAnonymousSuperclassEnclosingInstance();
  }

  public void ClassInstanceExpr.typeCheckEnclosingInstance() {
    TypeDecl C = type();
    if (!C.isInnerClass()) {
      return;
    }

    TypeDecl enclosing = null;
    if (C.isAnonymous()) {
      if (noEnclosingInstance()) {
        enclosing = null;
      } else {
        enclosing = hostType();
      }
    } else if (C.isLocalClass()) {
      if (C.inStaticContext()) {
        enclosing = null;
      } else if (noEnclosingInstance()) {
        enclosing = unknownType();
      } else {
        TypeDecl nest = hostType();
        while (nest != null && !nest.instanceOf(C.enclosingType())) {
          nest = nest.enclosingType();
        }
        enclosing = nest;
      }
    } else if (C.isMemberType()) {
      if (!isQualified()) {
        if (noEnclosingInstance()) {
          errorf("No enclosing instance to initialize %s with", C.typeName());
          //System.err.println("ClassInstanceExpr: Non qualified MemberType " + C.typeName() + " is in a static context when instantiated in " + this);
          enclosing = unknownType();
        } else {
          TypeDecl nest = hostType();
          while (nest != null && !nest.instanceOf(C.enclosingType())) {
            if (nest.isStatic()) {
              errorf("No enclosing instance to initialize %s with", C.typeName());
              nest = unknownType();
              break;
            }
            nest = nest.enclosingType();
          }
          enclosing = nest == null ? unknownType() : nest;
        }
      } else {
        enclosing = enclosingInstance();
      }
    }
    if (enclosing != null) {
      if (enclosing.isUnknown()) {
        errorf("No enclosing instance to initialize %s with", C.typeName());
      } else if (!enclosing.instanceOf(C.enclosingType())) {
        errorf("*** Can not instantiate %s with the enclosing instance %s due to incorrect enclosing instance",
            C.typeName(), enclosing.typeName());
      } else if (!isQualified() && C.isMemberType() && inExplicitConstructorInvocation() && enclosing == hostType()) {
        errorf("*** The innermost enclosing instance of type %s is this which is not yet initialized here.",
            enclosing.typeName());
      }
    }
  }

  inh TypeDecl SuperConstructorAccess.enclosingInstance();
  inh TypeDecl ClassInstanceExpr.enclosingInstance();
  inh TypeDecl TypeDecl.enclosingInstance();
  eq Program.getChild().enclosingInstance() = null;
  eq StaticInitializer.getBlock().enclosingInstance() = null;
  //eq InstanceInitializer.getBlock().enclosingInstance() = null;
  eq TypeDecl.getBodyDecl(int index).enclosingInstance() {
    if (getBodyDecl(index) instanceof MemberTypeDecl && !((MemberTypeDecl) getBodyDecl(index)).typeDecl().isInnerType()) {
      return null;
    }
    if (getBodyDecl(index) instanceof ConstructorDecl) {
      return enclosingInstance();
    }
    return this;
  }
  eq AbstractDot.getRight().enclosingInstance() = getLeft().type();
  eq ConstructorDecl.getParsedConstructorInvocation().enclosingInstance() = unknownType();
  eq ConstructorDecl.getImplicitConstructorInvocation().enclosingInstance() = unknownType();

  syn boolean ClassInstanceExpr.noEnclosingInstance() =
      isQualified() ? qualifier().staticContextQualifier() : inStaticContext();

  public void ClassInstanceExpr.typeCheckAnonymousSuperclassEnclosingInstance() {
    if (type().isAnonymous() && ((ClassDecl) type()).superclass().isInnerType()) {
      TypeDecl S = ((ClassDecl) type()).superclass();
      if (S.isLocalClass()) {
        if (S.inStaticContext()) {
        } else if (noEnclosingInstance()) {
          errorf("*** No enclosing instance to class %s due to static context", type().typeName());
        } else if (inExplicitConstructorInvocation()) {
          errorf("*** No enclosing instance to superclass %s of %s since this is not initialized yet",
              S.typeName(), type().typeName());
        }
      } else if (S.isMemberType()) {
        if (!isQualified()) {
          // 15.9.2 2nd paragraph
          if (noEnclosingInstance()) {
            errorf("*** No enclosing instance to class %s due to static context", type().typeName());
          } else {
            TypeDecl nest = hostType();
            while (nest != null && !nest.instanceOf(S.enclosingType())) {
              nest = nest.enclosingType();
            }
            if (nest == null) {
              errorf("*** No enclosing instance to superclass %s of %s",
                  S.typeName(), type().typeName());
            } else if (inExplicitConstructorInvocation()) {
              errorf("*** No enclosing instance to superclass %s of %s since this is not initialized yet",
                  S.typeName(), type().typeName());
            }
          }
        }
      }
    }
  }

  public void ArrayTypeWithSizeAccess.typeCheck() {
    super.typeCheck();
    if (!getExpr().type().unaryNumericPromotion().isInt()) {
      errorf("%s is not int after unary numeric promotion", getExpr().type().typeName());
    }
  }

  // 15.25
  public void ConditionalExpr.typeCheck() {
    if (!getCondition().type().isBoolean()) {
      error("The first operand of a conditional expression must be a boolean");
    }
    if (type().isUnknown() && !getTrueExpr().type().isUnknown() && !getFalseExpr().type().isUnknown()) {
      error("The types of the second and third operand in this conditional expression do not match");
    }
  }

  public void IntegerLiteral.typeCheck() {
    if (constant().error) {
      error("The value of an int literal must be a decimal value in the range -2147483648..2147483647 or a hexadecimal or octal literal that fits in 32 bits.");
    }
  }

  public void LongLiteral.typeCheck() {
    if (constant().error) {
      errorf("The value of the long literal %s is not legal", getLITERAL());
    }
  }

  public void FloatingPointLiteral.typeCheck() {
    if (!isZero() && constant().floatValue() == 0.0f) {
      errorf("It is an error for nonzero floating-point %s to round to zero", getLITERAL());
    }
    if (constant().floatValue() == Float.NEGATIVE_INFINITY || constant().floatValue() == Float.POSITIVE_INFINITY) {
      errorf("the floating-point literal \"%s\" is too large", getLITERAL());
    }
  }

  public void DoubleLiteral.typeCheck() {
    if (!isZero() && constant().doubleValue() == 0.0f) {
      errorf("It is an error for nonzero floating-point %s to round to zero", getLITERAL());
    }
    if (constant().doubleValue() == Double.NEGATIVE_INFINITY || constant().doubleValue() == Double.POSITIVE_INFINITY) {
      errorf("the floating-point literal \"%s\" is too large", getLITERAL());
    }
  }
}
