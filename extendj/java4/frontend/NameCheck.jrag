/* Copyright (c) 2005-2008, Torbjorn Ekman
 *                    2013, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect NameCheck {
  public void ASTNode.nameCheck() {
  }

  public TypeDecl ASTNode.extractSingleType(SimpleSet c) {
    if (c.size() != 1) {
      return null;
    }
    return (TypeDecl) c.iterator().next();
  }

  public void SingleTypeImportDecl.nameCheck() {
    if (!getAccess().type().typeName().equals(typeName()) && !getAccess().type().isUnknown()) {
      errorf("Single-type import %s is not the canonical name of type %s",
          typeName(), getAccess().type().typeName());
    } else if (allImportedTypes(getAccess().type().name()).size() > 1) {
      errorf("%s is imported multiple times", getAccess().type().name());
    }
  }

  inh SimpleSet ImportDecl.allImportedTypes(String name);
  eq CompilationUnit.getImportDecl().allImportedTypes(String name) = importedTypes(name);

  public void TypeImportOnDemandDecl.nameCheck() {
    if (getAccess().lastAccess().isTypeAccess()
        && !getAccess().type().typeName().equals(typeName())) {
      errorf("On demand type import %s.* is not the canonical name of type %s",
          typeName(), getAccess().type().typeName());
    }
  }

  public void CompilationUnit.nameCheck() {
    for (int i = 0; i < getNumImportDecl(); i++) {
      ImportDecl decl = getImportDecl(i);
      if (!decl.isOnDemand()) {
        Iterator importIter = decl.importedTypes().iterator();
        while (importIter.hasNext()) {
          TypeDecl importedType = (TypeDecl) importIter.next();
          Iterator iter = localLookupType(importedType.name()).iterator();
          while (iter.hasNext()) {
            TypeDecl local = (TypeDecl) iter.next();
            if (local != importedType) {
              errorf("imported type %s conflicts with visible type", decl.typeName());
            }
          }
        }
      }
    }
  }

  public void PackageAccess.nameCheck() {
    if (!hasPackage(packageName())) {
      errorf("package %s not found", packageName());
    }
  }

  syn boolean MethodAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  public void ConstructorDecl.nameCheck() {
    super.nameCheck();
    // 8.8
    if (!hostType().name().equals(name())) {
      errorf("constructor %s does not have the same name as the simple name of the host class %s",
          name(), hostType().name());
    }

    // 8.8.2
    if (hostType().lookupConstructor(this) != this) {
      errorf("constructor with signature %s is multiply declared in type %s", signature(),
          hostType().typeName());
    }

    if (circularThisInvocation(this)) {
      errorf("The constructor %s may not directly or indirectly invoke itself", signature());
    }
  }

  // 8.8.5
  syn lazy boolean ConstructorDecl.circularThisInvocation(ConstructorDecl decl) circular [true] {
    if (hasConstructorInvocation()) {
      Expr e = ((ExprStmt) getConstructorInvocation()).getExpr();
      if (e instanceof ConstructorAccess) {
        ConstructorDecl constructorDecl = ((ConstructorAccess) e).decl();
        if (constructorDecl == decl) {
          return true;
        }
        return constructorDecl.circularThisInvocation(decl);
      }
    }
    return false;
  }

  public void MethodDecl.nameCheck() {
    // 8.4
    // 8.4.2
    if (hostType().methodsSignature(signature()).size() > 1) {
      errorf("method with signature %s is multiply declared in type %s", signature(),
          hostType().typeName());
    }
    // 8.4.3.4
    if (isNative() && hasBlock()) {
      error("native methods must have an empty semicolon body");
    }
    // 8.4.5
    if (isAbstract() && hasBlock()) {
      error("abstract methods must have an empty semicolon body");
    }
    // 8.4.5
    if (!hasBlock() && !(isNative() || isAbstract())) {
      error("only abstract and native methods may have an empty semicolon body");
    }
  }

  public void ConstructorAccess.nameCheck() {
    super.nameCheck();
    ConstructorDecl decl = (ConstructorDecl) enclosingBodyDecl();
    if (((ExprStmt) decl.getConstructorInvocation()).getExpr() == this) {
      // don't error-check the parsed constructor invocation in case it is not the used one
      if (decls().isEmpty()) {
        errorf("no constructor matches %s", this.prettyPrint());
      } else if (decls().size() > 1 && validArgs()) {
        errorf("several most specific constructors for %s", this.prettyPrint());
        for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
          errorf("         %s", ((ConstructorDecl) iter.next()).signature());
        }
      }
    }
  }

  syn boolean ConstructorAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  syn boolean ClassInstanceExpr.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  public void ClassInstanceExpr.nameCheck() {
    super.nameCheck();
    if (decls().isEmpty()) {
      errorf("can not instantiate %s no matching constructor found in %s", type().typeName(),
          type().typeName());
    } else if (decls().size() > 1 && validArgs()) {
      error("several most specific constructors found");
      for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
        errorf("         %s", ((ConstructorDecl) iter.next()).signature());
      }
    } else if (!hasTypeDecl()) {
      // check if the constructor is accessible (stricter when not in a class instance expression)
      // if constructor is private it can not be accessed outside the host class or a subtype of it
      ConstructorDecl decl = decl();
      if (decl.isProtected() && !hostPackage().equals(decl.hostPackage()) &&
          !hostType().instanceOf(decl.hostType())) {
        errorf("can not access the constructor %s", this.prettyPrint());
      }
    }
  }

  public void ArrayTypeAccess.nameCheck() {
    if (decl().elementType().isUnknown()) {
      errorf("no type named %s", decl().elementType().typeName());
    }
  }

  public void TypeAccess.nameCheck() {
    if (isQualified() && !qualifier().isTypeAccess() && !qualifier().isPackageAccess()) {
      errorf("can not access the type named %s in this context", decl().typeName());
    }
    if (decls().isEmpty()) {
      errorf("no visible type named %s", typeName());
    }
    if (decls().size() > 1) {
      StringBuilder sb = new StringBuilder();
      sb.append("several types named " + name() + ":");
      for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
        TypeDecl t = (TypeDecl) iter.next();
        sb.append(" " + t.typeName());
      }
      error(sb.toString());
    }
  }


  public void ClassAccess.nameCheck() {
    if (isQualified() && !qualifier().isTypeAccess()) {
      error("class literal may only contain type names");
    }
  }

  public void VarAccess.nameCheck() {
    if (decls().isEmpty() && (!isQualified() || !qualifier().type().isUnknown() || qualifier().isPackageAccess())) {
      errorf("no field named %s is accessible", name());
    }
    if (decls().size() > 1) {
      StringBuffer sb = new StringBuffer();
      sb.append("several fields named " + name());
      for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
        Variable v = (Variable) iter.next();
        sb.append("\n    " + v.type().typeName() + "." + v.name() + " declared in " + v.hostType().typeName());
      }
      error(sb.toString());
    }

    // 8.8.5.1
    if (inExplicitConstructorInvocation() && !isQualified() && decl().isInstanceVariable() && hostType() == decl().hostType()) {
      errorf("instance variable %s may not be accessed in an explicit constructor invocation", name());
    }

    Variable v = decl();
    if (!v.isFinal() && !v.isClassVariable() && !v.isInstanceVariable() && v.hostType() != hostType()) {
      error("A parameter/variable used but not declared in an inner class must be declared final");
    }

    // 8.3.2.3
    if ((decl().isInstanceVariable() || decl().isClassVariable()) && !isQualified()) {
      if (hostType() != null && !hostType().declaredBeforeUse(decl(), this)) {
        if (inSameInitializer() && !simpleAssignment() && inDeclaringClass()) {
          BodyDecl b = closestBodyDecl(hostType());
          errorf("variable %s is used in %s before it is declared", decl().name(), b.prettyPrint());
        }
      }
    }

  }

  // find the bodydecl declared in t in which this construct is nested
  public BodyDecl VarAccess.closestBodyDecl(TypeDecl t) {
    ASTNode node = this;
    while (!(node.getParent().getParent() instanceof Program) && node.getParent().getParent() != t) {
      node = node.getParent();
    }
    if (node instanceof BodyDecl) {
      return (BodyDecl) node;
    }
    return null;
  }

  syn boolean VarAccess.inSameInitializer() {
    BodyDecl b = closestBodyDecl(decl().hostType());
    if (b == null) {
      return false;
    }
    if (b instanceof FieldDeclaration && ((FieldDeclaration) b).isStatic() == decl().isStatic()) {
      return true;
    }
    if (b instanceof InstanceInitializer && !decl().isStatic()) {
      return true;
    }
    if (b instanceof StaticInitializer && decl().isStatic()) {
      return true;
    }
    return false;
  }

  syn boolean VarAccess.simpleAssignment() = isDest() && getParent() instanceof AssignSimpleExpr;

  syn boolean VarAccess.inDeclaringClass() = hostType() == decl().hostType();

  inh boolean TypeDecl.hasPackage(String packageName);
  inh boolean PackageAccess.hasPackage(String packageName);

  inh ASTNode TypeDecl.enclosingBlock();
  eq MethodDecl.getBlock().enclosingBlock() = this;
  eq ConstructorDecl.getBlock().enclosingBlock() = this;
  eq InstanceInitializer.getBlock().enclosingBlock() = this;
  eq Program.getChild().enclosingBlock() = null;

  public void TypeDecl.nameCheck() {
    if (isTopLevelType() && lookupType(packageName(), name()) != this) {
      errorf("duplicate type %s in package %s", name(), packageName());
    }

    if (!isTopLevelType() && !isAnonymous() && !isLocalClass() && extractSingleType(enclosingType().memberTypes(name())) != this) {
      errorf("duplicate member type %s in type %s", name(), enclosingType().typeName());
    }

    // 14.3
    if (isLocalClass()) {
      TypeDecl typeDecl = extractSingleType(lookupType(name()));
      if (typeDecl != null && typeDecl != this && typeDecl.isLocalClass() && enclosingBlock() == typeDecl.enclosingBlock()) {
        errorf("local class named %s may not be redeclared as a local class in the same block",
            name());
      }
    }

    if (!packageName().equals("") && hasPackage(fullName())) {
      errorf("type name conflicts with a package using the same name: %s", name());
    }

    // 8.1 & 9.1
    if (hasEnclosingTypeDecl(name())) {
      error("type may not have the same simple name as an enclosing type declaration");
    }
  }

  syn boolean TypeDecl.hasEnclosingTypeDecl(String name) {
    TypeDecl enclosingType = enclosingType();
    if (enclosingType != null) {
      return enclosingType.name().equals(name) || enclosingType.hasEnclosingTypeDecl(name);
    }
    return false;
  }

  public void FieldDeclaration.nameCheck() {
    super.nameCheck();
    // 8.3
    for (Iterator iter = hostType().memberFields(name()).iterator(); iter.hasNext(); ) {
      Variable v = (Variable) iter.next();
      if (v != this && v.hostType() == hostType()) {
        errorf("field named %s is multiply declared in type %s", name(), hostType().typeName());
      }
    }

  }

  inh VariableScope ParameterDeclaration.outerScope();
  inh VariableScope VariableDeclaration.outerScope();
  eq BasicCatch.getParameter().outerScope() = this;
  eq Block.getStmt().outerScope() = this;
  eq TypeDecl.getChild().outerScope() = this;
  eq ForStmt.getInitStmt().outerScope() = this;
  eq ForStmt.getStmt().outerScope() = this;
  eq Program.getChild().outerScope() {
    throw new UnsupportedOperationException("outerScope() not defined");
  }

  public void VariableDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl != this && decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s in enclosing scope", name());
        }
      }
      // 8.4.1
      else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable and parameter %s", name());
        }
      }
    }
    if (getParent().getParent() instanceof Block) {
      Block block = (Block) getParent().getParent();
      for (int i = 0; i < block.getNumStmt(); i++) {
        if (block.getStmt(i) instanceof Variable) {
          Variable v = (Variable) block.getStmt(i);
          if (v.name().equals(name()) && v != this) {
            errorf("duplicate declaration of local variable %s", name());
          }
        }
      }
    }
  }

  public void ParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of parameter %s", name());
    }
  }

  inh BodyDecl ParameterDeclaration.enclosingBodyDecl();

  public void LabeledStmt.nameCheck() {
    LabeledStmt stmt = lookupLabel(getLabel());
    if (stmt != null) {
      if (stmt.enclosingBodyDecl() == enclosingBodyDecl()) {
        error("Labels can not shadow labels in the same member");
      }
    }
  }

  inh boolean BreakStmt.insideLoop();
  inh boolean ContinueStmt.insideLoop();

  eq Program.getChild().insideLoop() = false;
  eq TypeDecl.getBodyDecl(int i).insideLoop() = false;
  eq ForStmt.getStmt().insideLoop() = true;
  eq WhileStmt.getStmt().insideLoop() = true;
  eq DoStmt.getStmt().insideLoop() = true;

  inh boolean BreakStmt.insideSwitch();
  eq Program.getChild().insideSwitch() = false;
  eq TypeDecl.getBodyDecl(int i).insideSwitch() = false;
  eq SwitchStmt.getBlock().insideSwitch() = true;

  public void BreakStmt.nameCheck() {
    if (!hasLabel() && !insideLoop() && !insideSwitch()) {
      error("break outside switch or loop");
    } else if (hasLabel()) {
      LabeledStmt label = lookupLabel(getLabel());
      if (label == null) {
        error("labeled break must have visible matching label");
      }
    }
  }

  public void ContinueStmt.nameCheck() {
    if (!insideLoop()) {
      error("continue outside loop");
    } else if (hasLabel()) {
      LabeledStmt label = lookupLabel(getLabel());
      if (label == null) {
        error("labeled continue must have visible matching label");
      } else if (!label.getStmt().continueLabel()) {
        errorf("%s is not a loop label", getLabel());
      }
    }
  }

  syn boolean Stmt.continueLabel() = false;
  eq ForStmt.continueLabel() = true;
  eq WhileStmt.continueLabel() = true;
  eq DoStmt.continueLabel() = true;

  public void ConstCase.nameCheck() {
    if (getValue().isConstant() && bind(this) != this) {
      errorf("constant expression %s is multiply declared in two case statements",
          getValue().prettyPrint());
    }
  }

  public void DefaultCase.nameCheck() {
    if (bind(this) != this) {
      error("only one default case statement allowed");
    }
  }

  inh lazy Case Case.bind(Case c);
  eq SwitchStmt.getBlock().bind(Case c) {
    Block b = getBlock();
    for (int i = 0; i < b.getNumStmt(); i++) {
      if (b.getStmt(i) instanceof Case && ((Case) b.getStmt(i)).constValue(c)) {
        return (Case) b.getStmt(i);
      }
    }
    return null;
  }
  eq Program.getChild().bind(Case c) = null;

  syn boolean TypeDecl.assignableToInt() = false;
  eq IntegralType.assignableToInt() = true;
  eq LongType.assignableToInt() = false;

  syn boolean Case.constValue(Case c);
  eq ConstCase.constValue(Case c) {
    if (!(c instanceof ConstCase) || !getValue().isConstant()) {
      return false;
    }
    if (!getValue().type().assignableToInt() || !((ConstCase) c).getValue().type().assignableToInt()) {
      return false;
    }
    return getValue().constant().intValue() == ((ConstCase) c).getValue().constant().intValue();
  }
  eq DefaultCase.constValue(Case c) = c instanceof DefaultCase;

  inh SimpleSet LocalClassDeclStmt.otherLocalClassDecls(String name);
  inh SimpleSet Block.otherLocalClassDecls(String name);

  eq BodyDecl.getChild().otherLocalClassDecls(String name) = SimpleSet.emptySet;

  eq Block.getStmt(int index).otherLocalClassDecls(String name) {
    SimpleSet local = SimpleSet.emptySet;
    for (int i = index-1; i >= 0 && !(getStmt(i) instanceof Case); --i) {
      if (getStmt(i) instanceof LocalClassDeclStmt) {
        TypeDecl t = ((LocalClassDeclStmt) getStmt(i)).getClassDecl();
        if (t.name().equals(name)) {
          local = local.add(t);
        }
      }
    }
    if (!local.isEmpty()) {
      return local;
    } else {
      return otherLocalClassDecls(name);
    }
  }

  /**
   * Checks that this local class declaration does not conflict with a previous
   * declaration in the local scope.
   */
  public void LocalClassDeclStmt.nameCheck() {
    TypeDecl decl = getClassDecl();
    SimpleSet decls = otherLocalClassDecls(decl.name());
    if (!decls.isEmpty()) {
      errorf("another local class %s has already been declared in this scope", decl.name());
    }
  }
}
