/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.util.*;

aspect DeclareBeforeUse {
  inh lazy int VariableDeclaration.blockIndex();
  eq Program.getChild().blockIndex() = -1;// default value
  eq Block.getStmt(int index).blockIndex() = index;// index in stmt list of block

  syn boolean Block.declaredBeforeUse(VariableDeclaration decl, int indexUse) =
      decl.blockIndex() < indexUse;

  // TODO use inherited attr?
  public int ASTNode.varChildIndex(TypeDecl t) {
    ASTNode node = this;
    while (node != null && node.getParent() != null && node.getParent().getParent() != t) {
      node = node.getParent();
    }
    if (node == null) {
      return -1;
    }
    return t.getBodyDeclListNoTransform().getIndexOfChild(node);
  }

  public boolean TypeDecl.declaredBeforeUse(Variable decl, ASTNode use) {
    int indexDecl = ((ASTNode) decl).varChildIndex(this);
    int indexUse = use.varChildIndex(this);
    return indexDecl < indexUse;
  }

  public boolean TypeDecl.declaredBeforeUse(Variable decl, int indexUse) {
    int indexDecl = ((ASTNode) decl).varChildIndex(this);
    return indexDecl < indexUse;
  }
}
