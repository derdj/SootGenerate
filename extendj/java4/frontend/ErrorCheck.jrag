/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ErrorCheck {

  protected String ASTNode.sourceFile() {
    ASTNode node = this;
    while (node != null && !(node instanceof CompilationUnit)) {
      node = node.getParent();
    }
    if (node == null) {
      return "Unknown file";
    }
    CompilationUnit u = (CompilationUnit) node;
    return u.relativeName();
  }

  syn int ASTNode.lineNumber() {
    ASTNode n = this;
    while (n.getParent() != null && n.getStart() == 0) {
      n = n.getParent();
    }
    return getLine(n.getStart());
  }

  eq ClassDecl.lineNumber() = getLine(IDstart);
  eq MethodDecl.lineNumber() = getLine(IDstart);

  // set start and end position to the same as the argument and return self
  public ASTNode ASTNode.setLocation(ASTNode node) {
    setStart(node.getStart());
    setEnd(node.getEnd());
    return this;
  }

  public ASTNode ASTNode.setStart(int i) {
    start = i;
    return this;
  }
  public int ASTNode.start() {
    return start;
  }
  public ASTNode ASTNode.setEnd(int i) {
    end = i;
    return this;
  }
  public int ASTNode.end() {
    return end;
  }

  public String ASTNode.location() {
    return "" + lineNumber();
  }
  public String ASTNode.errorPrefix() {
    return sourceFile() + ":" + location() + ":\n" + "  *** Semantic Error: ";
  }
  public String ASTNode.warningPrefix() {
    return sourceFile() + ":" + location() + ":\n" + "  *** WARNING: ";
  }

  protected Collection<Problem> CompilationUnit.errors = new LinkedList<Problem>();
  protected Collection<Problem> CompilationUnit.warnings = new LinkedList<Problem>();

  public Collection CompilationUnit.parseErrors() { return parseErrors; }
  public void CompilationUnit.addParseError(Problem msg) { parseErrors.add(msg); }
  protected Collection CompilationUnit.parseErrors = new ArrayList();

  public class Problem implements Comparable {
    public int compareTo(Object o) {
      if (o instanceof Problem) {
        Problem other = (Problem) o;
        if (!fileName.equals(other.fileName)) {
          return fileName.compareTo(other.fileName);
        }
        if (line != other.line) {
          return line - other.line;
        }
        return message.compareTo(other.message);
      }
      return 0;
    }
    public static class Severity {
      public static final Severity ERROR = new Severity();
      public static final Severity WARNING = new Severity();
      private Severity() { }
    }
    public static class Kind {
      public static final Kind OTHER = new Kind();
      public static final Kind LEXICAL = new Kind();
      public static final Kind SYNTACTIC = new Kind();
      public static final Kind SEMANTIC = new Kind();
      private Kind() { }
    }
    protected int line = -1;
    public int line() { return line; }
    protected int column = -1;
    public int column() { return column; }
    protected int endLine = -1;
    public int endLine() { return endLine; }
    protected int endColumn = -1;
    public int endColumn() { return endColumn; }
    protected String fileName;
    public String fileName() { return fileName; }
    public void setFileName(String fileName) { this.fileName = fileName; }
    protected String message;
    public String message() { return message; }
    protected Severity severity = Severity.ERROR;
    public Severity severity() { return severity; }
    protected Kind kind = Kind.OTHER;
    public Kind kind() { return kind; }
    public Problem(String fileName, String message) {
      this.fileName = fileName;
      this.message = message;
    }
    public Problem(String fileName, String message, int line) {
      this(fileName, message);
      this.line = line;
    }
    public Problem(String fileName, String message, int line, Severity severity) {
      this(fileName, message);
      this.line = line;
      this.severity = severity;
    }
    public Problem(String fileName, String message, int line, int column, Severity severity) {
      this(fileName, message);
      this.line = line;
      this.column = column;
      this.severity = severity;
    }
    public Problem(String fileName, String message, int line, Severity severity, Kind kind) {
      this(fileName, message);
      this.line = line;
      this.kind = kind;
      this.severity = severity;
    }
    public Problem(String fileName, String message, int line, int column, Severity severity, Kind kind) {
      this(fileName, message);
      this.line = line;
      this.column = column;
      this.kind = kind;
      this.severity = severity;
    }
    public Problem(String fileName, String message, int line, int column, int endLine, int endColumn, Severity severity, Kind kind) {
      this(fileName, message);
      this.line = line;
      this.column = column;
      this.endLine = endLine;
      this.endColumn = endColumn;
      this.kind = kind;
      this.severity = severity;
    }
    public String toString() {
      String location = "";
      if (line != -1 && column != -1) {
        location = line + "," + column + ":";
      } else if (line != -1) {
        location = line + ":";
      }
      String s = "";
      if (this.kind == Kind.LEXICAL) {
        s = "Lexical Error: ";
      } else if (this.kind == Kind.SYNTACTIC) {
        s = "Syntactic Error: ";
      } else if (this.kind == Kind.SEMANTIC) {
        s = "Semantic Error: ";
      }
      return fileName + ":" + location + "\n" + "  " + s + message;
    }
  }

  public void ASTNode.errorf(String messagefmt, Object... args) {
    error(String.format(messagefmt, args));
  }

  public void ASTNode.error(String message) {
    ASTNode node = this;
    while (node != null && !(node instanceof CompilationUnit)) {
      node = node.getParent();
    }
    CompilationUnit cu = (CompilationUnit) node;
    if (getNumChild() == 0 && getStart() != 0 && getEnd() != 0) {
      int line = getLine(getStart());
      int column = getColumn(getStart());
      int endLine = getLine(getEnd());
      int endColumn = getColumn(getEnd());
      cu.errors.add(new Problem(sourceFile(), message, line, column, endLine, endColumn,
          Problem.Severity.ERROR, Problem.Kind.SEMANTIC));
    } else {
      cu.errors.add(new Problem(sourceFile(), message, lineNumber(), Problem.Severity.ERROR,
          Problem.Kind.SEMANTIC));
    }
  }

  public void ASTNode.warning(String s) {
    ASTNode node = this;
    while (node != null && !(node instanceof CompilationUnit)) {
      node = node.getParent();
    }
    CompilationUnit cu = (CompilationUnit) node;
    cu.warnings.add(new Problem(sourceFile(), "WARNING: " + s, lineNumber(), Problem.Severity.WARNING));
  }

  public void ASTNode.collectErrors() {
    nameCheck();
    typeCheck();
    accessControl();
    exceptionHandling();
    checkUnreachableStmt();
    definiteAssignment();
    checkModifiers();
    for (int i = 0; i < getNumChild(); i++) {
      getChild(i).collectErrors();
    }
  }

  public void ClassDecl.collectErrors() {
    super.collectErrors();
    if (hasImplicitConstructor()) {
      getImplicitConstructor().collectErrors();
    }
  }

  public void VarDeclStmt.collectErrors() {
    // check reachability of the multi-declaration
    checkUnreachableStmt();

    // delegate other error checks to NTA single variable declarations
    getSingleDeclList().collectErrors();
  }

  /**
   * @return collection of semantic errors
   */
  public Collection<Problem> CompilationUnit.errors() {
    return errors;
  }

  /**
   * @return collection of semantic warnings
   */
  public Collection<Problem> CompilationUnit.warnings() {
    return warnings;
  }
}
