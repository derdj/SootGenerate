/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect ExceptionHandling {

  /**
   * @return <code>true</code> if this TyStmt has a non-empty finally block
   */
  syn lazy boolean TryStmt.hasNonEmptyFinally() =
      hasFinally() && getFinally().getNumStmt() > 0;

  // exception types
  eq Program.getChild().typeException() = lookupType("java.lang", "Exception");
  inh lazy TypeDecl TypeDecl.typeException();
  eq Program.getChild().typeRuntimeException() = lookupType("java.lang", "RuntimeException");
  inh lazy TypeDecl TypeDecl.typeRuntimeException();
  eq Program.getChild().typeError() = lookupType("java.lang", "Error");
  inh lazy TypeDecl TypeDecl.typeError();
  eq Program.getChild().typeNullPointerException() = lookupType("java.lang", "NullPointerException");
  inh lazy TypeDecl ThrowStmt.typeNullPointerException();
  eq Program.getChild().typeThrowable() = lookupType("java.lang", "Throwable");
  inh lazy TypeDecl BodyDecl.typeThrowable();

  syn lazy boolean TypeDecl.isException() = instanceOf(typeException());

  /**
   * Checked exceptions must be declared thrown or caught in
   * an enclosing try-statement.
   *
   * Note that this attribute is the opposite of isUncheckedException, i.e.
   * the type is not tested for being a subclass of java.lang.Exception.
   *
   * @return {@code true} if this type is not a subtype of java.lang.RuntimException
   * or java.lang.Error
   */
  syn lazy boolean TypeDecl.isCheckedException() =
      !(instanceOf(typeRuntimeException()) || instanceOf(typeError()));

  /**
   * Unchecked exceptions need not be declared thrown or caught in
   * an enclosing try-statement.
   *
   * @return {@code true} if this type is a subtype of java.lang.RuntimException
   * or java.lang.Error
   */
  syn lazy boolean TypeDecl.isUncheckedException() =
      instanceOf(typeRuntimeException()) || instanceOf(typeError());

  inh boolean MethodAccess.handlesException(TypeDecl exceptionType);
  inh boolean ConstructorAccess.handlesException(TypeDecl exceptionType);
  inh lazy boolean ThrowStmt.handlesException(TypeDecl exceptionType);
  inh lazy boolean InstanceInitializer.handlesException(TypeDecl exceptionType);
  inh lazy boolean StaticInitializer.handlesException(TypeDecl exceptionType);
  inh boolean FieldDeclaration.handlesException(TypeDecl exceptionType);
  inh lazy boolean TryStmt.handlesException(TypeDecl exceptionType);
  inh lazy boolean ConstructorDecl.handlesException(TypeDecl exceptionType);
  inh lazy boolean MethodDecl.handlesException(TypeDecl exceptionType);
  inh boolean ClassInstanceExpr.handlesException(TypeDecl exceptionType);

  public void ASTNode.exceptionHandling() {
  }

  public void MethodAccess.exceptionHandling() {
    for (Iterator iter = exceptionCollection().iterator(); iter.hasNext(); ) {
      TypeDecl exceptionType = (TypeDecl) iter.next();
      if (exceptionType.isCheckedException() && !handlesException(exceptionType)) {
        errorf("%s.%s invoked in %s may throw uncaught exception %s",
            decl().hostType().fullName(), this.name(),
            hostType().fullName(), exceptionType.fullName());
      }
    }
  }

  syn lazy Collection MethodAccess.exceptionCollection() {
    //System.out.println("Computing exceptionCollection for " + name());
    HashSet set = new HashSet();
    Iterator iter = decls().iterator();
    if (!iter.hasNext()) {
      return set;
    }

    MethodDecl m = (MethodDecl) iter.next();
    //System.out.println("Processing first found method " + m.signature() + " in " + m.hostType().fullName());

    for (int i = 0; i < m.getNumException(); i++) {
      TypeDecl exceptionType = m.getException(i).type();
      set.add(exceptionType);
    }
    while (iter.hasNext()) {
      HashSet first = new HashSet();
      first.addAll(set);
      HashSet second = new HashSet();
      m = (MethodDecl) iter.next();
      //System.out.println("Processing the next method " + m.signature() + " in " + m.hostType().fullName());
      for (int i = 0; i < m.getNumException(); i++) {
        TypeDecl exceptionType = m.getException(i).type();
        second.add(exceptionType);
      }
      set = new HashSet();
      for (Iterator i1 = first.iterator(); i1.hasNext(); ) {
        TypeDecl firstType = (TypeDecl) i1.next();
        for (Iterator i2 = second.iterator(); i2.hasNext(); ) {
          TypeDecl secondType = (TypeDecl) i2.next();
          if (firstType.instanceOf(secondType)) {
            set.add(firstType);
          } else if (secondType.instanceOf(firstType)) {
            set.add(secondType);
          }
        }
      }
    }
    return set;
  }

  public void ConstructorAccess.exceptionHandling() {
    for (Access exception : decl().getExceptionList()) {
      TypeDecl exceptionType = exception.type();
      if (exceptionType.isCheckedException() && !handlesException(exceptionType)) {
        errorf("%s may throw uncaught exception %s",
            this.prettyPrint(), exceptionType.fullName());
      }
    }
  }

  public void ClassInstanceExpr.exceptionHandling() {
    for (Access exception : decl().getExceptionList()) {
      TypeDecl exceptionType = exception.type();
      if (exceptionType.isCheckedException() && !handlesException(exceptionType)) {
        errorf("%s may throw uncaught exception %s; it must be caught or declared as being thrown",
            this.prettyPrint(), exceptionType.fullName());
      }
    }
  }

  public void ThrowStmt.exceptionHandling() {
    TypeDecl exceptionType = getExpr().type();
    if (exceptionType == typeNull()) {
      exceptionType = typeNullPointerException();
    }
    // 8.4.4
    if (exceptionType.isCheckedException() && !handlesException(exceptionType)) {
      errorf("%s throws uncaught exception %s", this.prettyPrint(), exceptionType.fullName());
    }
  }

  eq Program.getChild().handlesException(TypeDecl exceptionType) {
    throw new Error("Operation handlesException not supported");
  }

  eq CompilationUnit.getTypeDecl().handlesException(TypeDecl exceptionType) = false;

  eq MethodDecl.getBlock().handlesException(TypeDecl exceptionType) =
      throwsException(exceptionType);

  syn lazy boolean MethodDecl.throwsException(TypeDecl exceptionType) {
    for (Access exception : getExceptionList()) {
      if (exceptionType.instanceOf(exception.type())) {
        return true;
      }
    }
    return false;
  }

  eq ConstructorDecl.getBlock().handlesException(TypeDecl exceptionType) =
      throwsException(exceptionType);

  eq ConstructorDecl.getParsedConstructorInvocation().handlesException(TypeDecl exceptionType) =
      throwsException(exceptionType);

  eq ConstructorDecl.getImplicitConstructorInvocation().handlesException(TypeDecl exceptionType) =
      throwsException(exceptionType);

  syn lazy boolean ConstructorDecl.throwsException(TypeDecl exceptionType) {
    for (Access exception : getExceptionList()) {
      if (exceptionType.instanceOf(exception.type())) {
        return true;
      }
    }
    return false;
  }

  eq FieldDeclaration.getInit().handlesException(TypeDecl exceptionType) {
    if (hostType().isAnonymous()) {
      return true;
    }
    for (Iterator iter = hostType().constructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl decl = (ConstructorDecl) iter.next();
      if (!decl.throwsException(exceptionType)) {
        return false;
      }
    }
    return true;
  }

  // 8.6
  eq InstanceInitializer.getBlock().handlesException(TypeDecl exceptionType) {
    if (hostType().isAnonymous()) {
      return true;
    }
    for (Iterator iter = hostType().constructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl decl = (ConstructorDecl) iter.next();
      if (!decl.throwsException(exceptionType)) {
        return false;
      }
    }
    return true;
  }

  eq StaticInitializer.getBlock().handlesException(TypeDecl exceptionType) =
      hostType().isAnonymous() && handlesException(exceptionType);

  eq TryStmt.getCatchClause().handlesException(TypeDecl exceptionType) {
    if (hasNonEmptyFinally() && !getFinally().canCompleteNormally()) {
      return true;
    }
    return handlesException(exceptionType);
  }

  eq TryStmt.getBlock().handlesException(TypeDecl exceptionType) {
    for (int i = 0; i < getNumCatchClause(); i++) {
      if (getCatchClause(i).handles(exceptionType)) {
        return true;
      }
    }
    if (hasNonEmptyFinally() && !getFinally().canCompleteNormally()) {
      return true;
    }
    return handlesException(exceptionType);
  }

  // the catch clause catches the exception
  syn boolean CatchClause.handles(TypeDecl exceptionType) = false;
  eq BasicCatch.handles(TypeDecl exceptionType) =
      !getParameter().type().isUnknown()
      && exceptionType.instanceOf(getParameter().type());

  /**
   * The block of the try statement can throw an exception of
   * a type assignable to the given type.
   */
  syn lazy boolean TryStmt.catchableException(TypeDecl type) =
      getBlock().reachedException(type);

  protected boolean ASTNode.reachedException(TypeDecl type) {
    for (int i = 0; i < getNumChild(); i++) {
      if (getChild(i).reachedException(type)) {
        return true;
      }
    }
    return false;
  }

  protected boolean TryStmt.reachedException(TypeDecl type) {
    boolean found = false;
    // found is true if the exception type is caught by a catch clause
    for (int i = 0; i < getNumCatchClause() && !found; i++) {
      if (getCatchClause(i).handles(type)) {
        found = true;
      }
    }
    // if an exception is thrown in the block and the exception is not caught and
    // either there is no finally block or the finally block can complete normally
    if (!found && (!hasNonEmptyFinally() || getFinally().canCompleteNormally()) ) {
      if (getBlock().reachedException(type)) {
        return true;
      }
    }
    // even if the exception is caught by the catch clauses they may
    // throw new exceptions
    for (int i = 0; i < getNumCatchClause(); i++) {
      if (getCatchClause(i).reachedException(type)) {
        return true;
      }
    }
    return hasNonEmptyFinally() && getFinally().reachedException(type);
  }

  syn lazy boolean TypeDecl.mayCatch(TypeDecl thrownType) =
      thrownType.instanceOf(this) || this.instanceOf(thrownType);

  protected boolean MethodAccess.reachedException(TypeDecl catchType) {
    for (Iterator iter = exceptionCollection().iterator(); iter.hasNext(); ) {
      TypeDecl exceptionType = (TypeDecl) iter.next();
      if (catchType.mayCatch(exceptionType)) {
        return true;
      }
    }
    return super.reachedException(catchType);
  }

  protected boolean ThrowStmt.reachedException(TypeDecl catchType) {
    TypeDecl exceptionType = getExpr().type();
    if (exceptionType == typeNull()) {
      exceptionType = typeNullPointerException();
    }
    if (catchType.mayCatch(exceptionType)) {
      return true;
    }
    return super.reachedException(catchType);
  }

  // 8.8.4 (8.4.4)
  protected boolean ConstructorAccess.reachedException(TypeDecl catchType) {
    for (Access exception : decl().getExceptionList()) {
      TypeDecl exceptionType = exception.type();
      if (catchType.mayCatch(exceptionType)) {
        return true;
      }
    }
    return super.reachedException(catchType);
  }

  protected boolean ClassInstanceExpr.reachedException(TypeDecl catchType) {
    ConstructorDecl decl = decl();
    for (Access exception : decl().getExceptionList()) {
      TypeDecl exceptionType = exception.type();
      if (catchType.mayCatch(exceptionType)) {
        return true;
      }
    }
    for (int i = 0; i < getNumArg(); i++) {
      if (getArg(i).reachedException(catchType)) {
        return true;
      }
    }
    return false;
  }

}
