/* Copyright (c) 2005-2008, Torbjorn Ekman
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect AccessControl {
  // 6.6 Access Control

  syn lazy boolean ArrayDecl.accessibleFrom(TypeDecl type) = elementType().accessibleFrom(type);

  syn lazy boolean TypeDecl.accessibleFromPackage(String packageName) =
      !isPrivate() && (isPublic() || hostPackage().equals(packageName));

  eq UnknownType.accessibleFromPackage(String packageName) = false;

  syn lazy boolean TypeDecl.accessibleFromExtend(TypeDecl type) {
    if (type == this) {
      return true;
    }
    if (isInnerType()) {
      if (!enclosingType().accessibleFrom(type)) {
        return false;
      }
    }
    if (isPublic()) {
      return true;
    } else if (isProtected()) {
      // isProtected implies a nested type
      if (hostPackage().equals(type.hostPackage())) {
        return true;
      }
      if (type.isNestedType() && type.enclosingType().withinBodyThatSubclasses(enclosingType()) != null) {
        return true;
      }
      return false;
    } else if (isPrivate()) {
      return topLevelType() == type.topLevelType();
    } else {
      return hostPackage().equals(type.hostPackage());
    }
  }

  syn lazy boolean TypeDecl.accessibleFrom(TypeDecl type) {
    if (type == this) {
      return true;
    }
    if (isInnerType()) {
      if (!enclosingType().accessibleFrom(type)) {
        return false;
      }
    }
    if (isPublic()) {
      return true;
    } else if (isProtected()) {
      if (hostPackage().equals(type.hostPackage())) {
        return true;
      }
      if (isMemberType()) {
        TypeDecl typeDecl = type;
        while (typeDecl != null && !typeDecl.instanceOf(enclosingType())) {
          typeDecl = typeDecl.enclosingType();
        }
        if (typeDecl != null) {
          return true;
        }
      }
      return false;
    } else if (isPrivate()) {
      return topLevelType() == type.topLevelType();
    } else {
      return hostPackage().equals(type.hostPackage());
    }
  }

  syn lazy boolean MethodDecl.accessibleFrom(TypeDecl type) {
    if (isPublic()) {
      return true;
    } else if (isProtected()) {
      if (hostPackage().equals(type.hostPackage())) {
        return true;
      }
      if (type.withinBodyThatSubclasses(hostType()) != null) {
        return true;
      }
      return false;
    } else if (isPrivate()) {
      return hostType().topLevelType() == type.topLevelType();
    } else {
      return hostPackage().equals(type.hostPackage());
    }
  }

  syn lazy boolean ConstructorDecl.accessibleFrom(TypeDecl type) {
    if (!hostType().accessibleFrom(type)) {
      return false;
    } else if (isPublic()) {
      return true;
    } else if (isProtected()) {
      return true;
    } else if (isPrivate()) {
      return hostType().topLevelType() == type.topLevelType();
    } else {
      return hostPackage().equals(type.hostPackage());
    }
  }

  syn lazy boolean FieldDeclaration.accessibleFrom(TypeDecl type) {
    if (isPublic()) {
      return true;
    } else if (isProtected()) {
      if (hostPackage().equals(type.hostPackage())) {
        return true;
      }
      if (type.withinBodyThatSubclasses(hostType()) != null) {
        return true;
      }
      return false;
    } else if (isPrivate()) {
      return hostType().topLevelType() == type.topLevelType();
    } else {
      return hostPackage().equals(type.hostPackage());
    }
  }

  public void ASTNode.accessControl() {
  }

  public void TypeAccess.accessControl() {
    super.accessControl();
    TypeDecl hostType = hostType();
    if (hostType != null && !hostType.isUnknown() && !type().accessibleFrom(hostType)) {
      errorf("%s in %s can not access type %s",
          this.prettyPrint(), hostType().fullName(), type().fullName());
    } else if ((hostType == null || hostType.isUnknown())
        && !type().accessibleFromPackage(hostPackage())) {
      errorf("%s can not access type %s", this.prettyPrint(), type().fullName());
    }
  }

  public void ClassInstanceExpr.accessControl() {
    super.accessControl();
    if (type().isAbstract()) {
      errorf("Can not instantiate abstract class %s", type().fullName());
    }
    if (!decl().accessibleFrom(hostType())) {
      errorf("constructor %s is not accessible", decl().signature());
    }
  }

  public void ClassDecl.accessControl() {
    super.accessControl();

    // 8.1.1.2 final Classes
    TypeDecl typeDecl = superclass();
    if (!typeDecl.isUnknown() && !typeDecl.accessibleFromExtend(this)) {
      errorf("class %s may not extend non accessible type %s", fullName(), typeDecl.fullName());
    }

    if (hasSuperclass() && !superclass().accessibleFrom(this)) {
      errorf("a superclass must be accessible which %s is not", superclass().name());
    }

    // 8.1.4
    for (int i = 0; i < getNumImplements(); i++) {
      TypeDecl decl = getImplements(i).type();
      if (!decl.isCircular() && !decl.accessibleFrom(this)) {
        errorf("class %s can not implement non accessible type %s", fullName(), decl.fullName());
      }
    }
  }

  public void InterfaceDecl.accessControl() {
    super.accessControl();

    if (!isCircular()) {
      // 9.1.2
      HashSet set = new HashSet();
      for (int i = 0; i < getNumSuperInterface(); i++) {
        TypeDecl decl = getSuperInterface(i).type();

        if (!decl.isInterfaceDecl() && !decl.isUnknown()) {
          errorf("interface %s can not extend non interface type %s", fullName(), decl.fullName());
        }
        if (!decl.isCircular() && !decl.accessibleFrom(this)) {
          errorf("interface %s can not extend non accessible type %s", fullName(), decl.fullName());
        }
        if (set.contains(decl)) {
          errorf("extended interface %s is mentionened multiple times in extends clause",
              decl.fullName());
        }
        set.add(decl);
      }
    }
  }
}
