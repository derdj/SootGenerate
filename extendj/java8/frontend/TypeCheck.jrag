/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect TypeCheck {
  inh TypeDecl LambdaParameters.unknownType();
  inh TypeDecl InferredParameterDeclaration.unknownType();
  inh TypeDecl LambdaBody.unknownType();
  eq LambdaExpr.getLambdaParameters().unknownType() = unknownType();
  eq LambdaExpr.getLambdaBody().unknownType() = unknownType();

  syn lazy TypeDecl IntersectionCastExpr.type() = unknownType();

  // Lambdas should propagate target return type to returns in lambda body.
  eq BlockLambdaBody.getBlock().returnType() {
    TypeDecl decl = enclosingLambda().targetType();
    if (decl == null) {
      return unknownType();
    } else if (!(decl instanceof InterfaceDecl)) {
      return unknownType();
    } else {
      InterfaceDecl iDecl = (InterfaceDecl)decl;
      if (!iDecl.isFunctional()) {
        return unknownType();
      } else {
        return iDecl.functionDescriptor().method.type();
      }
    }
  }


  syn lazy TypeDecl LambdaExpr.type() {
    // 15.27.3
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }
    if (congruentTo(iDecl.functionDescriptor())) {
      return iDecl;
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl MethodReference.type() {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }

    if (congruentTo(iDecl.functionDescriptor())) {
      return iDecl;
    } else {
      return unknownType();
    }
  }

  syn lazy TypeDecl ConstructorReference.type() {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      return unknownType();
    }
    if (targetInterface() == null) {
      return unknownType();
    }

    InterfaceDecl iDecl = targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    }

    return iDecl;
  }


  /* TODO: Type check that works for wildcard-parameterized interfaces */
  public void LambdaExpr.typeCheck() {
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      // 15.27
      error("Lambda expressions must target a functional interface");
      return;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere
    if (invocationContext() && targetType() == unknownType()) {
      return;
    }

    if (!targetType().isFunctionalInterface()) {
      // 15.27
      error("Lambda expressions must target a functional interface");
      return;
    }

    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      // 15.27
      errorf("Interface %s is not functional and can therefore not be targeted by a lambda expression",
          iDecl.typeName());
      return;
    }

    FunctionDescriptor f = iDecl.functionDescriptor();

    if (f.isGeneric()) {
      // 15.27
      errorf("Illegal lambda expression: Method %s in interface %s is generic",
          iDecl.functionDescriptor().method.name(), iDecl.typeName());
      return;
    }

    if (!getLambdaParameters().congruentTo(f)) {
      errorf("Lambda expression parameters incompatible with"
          + " parameters in method %s in interface %s",
          f.method.name(), iDecl.typeName());
    }

    if (getLambdaBody() instanceof ExprLambdaBody) {
      ExprLambdaBody exprBody = (ExprLambdaBody)getLambdaBody();
      if (f.method.type().isVoid()) {
        if (!exprBody.getExpr().stmtCompatible()) {
          errorf("Lambda expression body must be a statement expression,"
              + " because the method %s in interface %s has return type void",
              f.method.name(), iDecl.typeName());
        }
      } else {
        if (!exprBody.getExpr().type().assignConversionTo(f.method.type(), exprBody.getExpr())) {
          errorf("Lambda expression body is not compatible with"
              + " the return type %s in method %s in interface %s",
              f.method.type().typeName(), f.method.name(), iDecl.typeName());
        }
      }
    } else {
      BlockLambdaBody blockBody = (BlockLambdaBody)getLambdaBody();
      if (f.method.type().isVoid()) {
        if (!blockBody.voidCompatible()) {
          errorf("Lambda expression body is not allowed to return a value,"
              + " because the method %s in interface %s has return type void",
              f.method.name(), iDecl.typeName());
        }
      } else if (!blockBody.valueCompatible()) {
        errorf("Lambda expression body must not complete normally or contain empty return"
            + " statments, because the method %s in interface"
            + " %s has a return type which is non-void",
            f.method.name(), iDecl.typeName());
      }
    }
  }

  public void BlockLambdaBody.typeCheck() {
    // 15.27.2
    if (!voidCompatible() && !valueCompatible()) {
      error("Block lambda bodies must be either void or value compatible");
    }
  }

  refine TypeCheck
  public void ReturnStmt.typeCheck() {
    if (enclosingLambda() == null || enclosingLambda().hostType() != hostType()) {
      if (hasResult() && !returnType().isVoid()) {
        if (!getResult().type().assignConversionTo(returnType(), getResult())) {
          errorf("return value must be an instance of %s which %s is not",
              returnType().typeName(), getResult().type().typeName());
        }
      }
      // 8.4.5 8.8.5
      if (returnType().isVoid() && hasResult()) {
        error("return stmt may not have an expression in void methods");
      }
      // 8.4.5
      if (!returnType().isVoid() && !hasResult()) {
        error("return stmt must have an expression in non void methods");
      }
      if (enclosingBodyDecl() instanceof InstanceInitializer
          || enclosingBodyDecl() instanceof StaticInitializer) {
        error("Initializers may not return");
      }
    } else {
      if (hasResult() && !returnType().isVoid() && !(getResult() instanceof LambdaExpr)) {
        if (!getResult().type().assignConversionTo(returnType(), getResult())) {
          errorf("return value must be an instance of %s which %s is not",
              returnType().typeName(), getResult().type().typeName());
        }
      }
    }
  }

  public void MethodReference.typeCheck() {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      error("Method references must target a functional interface");
      return;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere.
    if (invocationContext() && targetType() == unknownType()) {
      return;
    }

    if (!targetType().isFunctionalInterface()) {
      error("Method references must target a functional interface");
      return;
    }

    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      errorf("Interface %s is not functional and can therefore not be targeted by a method reference",
          iDecl.typeName());
      return;
    }

    MethodDecl found = null;
    FunctionDescriptor f = iDecl.functionDescriptor();
    // Lookup method here and check that one most specific can be found
    if (this instanceof ExprMethodReference) {
      ExprMethodReference ref = (ExprMethodReference)this;
      found = ref.targetMethod(f);
      if (unknownMethod() == found) {
        // 15.13.1
        errorf("No method %s that is compatible with the method %s in the interface %s was found",
            name(), iDecl.functionDescriptor().method.fullSignature(), iDecl.typeName());
      } else if (found.isStatic()) {
        errorf("The method %s in type %s must be accessed in a static way",
            found.fullSignature(), found.hostType().typeName());
      } else if (ref.getExpr() instanceof Access && ((Access)ref.getExpr()).lastAccess() instanceof SuperAccess) {
        // 15.13.2
        if (found.isAbstract()) {
          errorf("Cannot directly invoke the abstract method %s in type %s",
              found.fullSignature(), found.hostType().typeName());
        }

        SuperAccess superAccess = (SuperAccess)((Access)ref.getExpr()).lastAccess();
        if (superAccess.isQualified() && superAccess.decl() instanceof InterfaceDecl) {
          if (hostType().isClassDecl()) {
            ClassDecl classDecl = (ClassDecl)hostType();
            if (classDecl.hasOverridingMethodInSuper(found)) {
              errorf("Cannot make a super reference to method %s, there is a more specific override",
                  found.fullSignature());
            }
          } else if (hostType().isInterfaceDecl()) {
            InterfaceDecl interfaceDecl = (InterfaceDecl)hostType();
            if (interfaceDecl.hasOverridingMethodInSuper(found)) {
              errorf("Cannot make a super reference to method %s, there is a more specific override",
                  found.fullSignature());
            }
          }
        }

      }
    } else if (this instanceof TypeMethodReference) {
      TypeMethodReference ref = (TypeMethodReference) this;
      MethodDecl staticMethod = ref.targetStaticMethod(f);
      MethodDecl instanceMethod = ref.targetInstanceMethod(f);
      if (ref.validStaticMethod(f) && ref.validInstanceMethod(f)) {
        errorf("Ambiguity error: two possible methods %s was found", staticMethod.name());
        return;
      } else if (unknownMethod() == staticMethod && unknownMethod() == instanceMethod) {
        errorf("No method %s that is compatible with the method %s in the interface %s was found",
            name(), iDecl.functionDescriptor().method.fullSignature(), iDecl.typeName());
         return;
      } else if (ref.validStaticMethod(f)) {
        if (ref.getTypeAccess() instanceof ParTypeAccess) {
          error("Parameterized qualifier is not allowed for static method references");
        } else {
          found = staticMethod;
        }
      } else if (ref.validInstanceMethod(f)) {
        found = instanceMethod;
      } else if (unknownMethod() != staticMethod && !staticMethod.isStatic()) {
        errorf("Cannot make a static reference to the non-static method %s in type %s",
            staticMethod.fullSignature(), staticMethod.hostType().typeName());
        return;
      } else if (instanceMethod.isStatic()) {
        errorf("The method %s in type %s must be accessed in a static way",
            instanceMethod.fullSignature(), instanceMethod.hostType().typeName());
        return;
      }
    }

    if (found != null && unknownMethod() != found) {
      // Check that found is compatible with the function descriptor
      if (!iDecl.functionDescriptor().method.type().isVoid()) {
        // 15.13.1
        if (found.type().isVoid()
            || !found.type().assignConversionTo(iDecl.functionDescriptor().method.type(), null)) {
          errorf("Return type of referenced method %s is not compatible with method %s in interface %s",
              found.fullSignature(), iDecl.functionDescriptor().method.fullSignature(),
              iDecl.typeName());
        }
      }

      for (int i = 0; i < found.getNumException(); i++) {
        TypeDecl exception = found.getException(i).type();
        if (exception.isUncheckedException()) {
          continue;
        }

        boolean legalException = false;
        for (TypeDecl descriptorThrows : iDecl.functionDescriptor().throwsList) {
          if (exception.strictSubtype(descriptorThrows)) {
            legalException = true;
            break;
          }
        }
        if (!legalException) {
          // 15.13.1
          errorf("Referenced method %s throws unhandled exception type %s",
              found.name(), exception.typeName());
        }
      }
    }
  }

  public void ConstructorReference.typeCheck() {
    // 15.13.1
    if (!assignmentContext() && !castContext() && !invocationContext()) {
      error("Constructor references must target a functional interface");
      return;
    }

    // This means there was an error in the overload resolution, will be reported elsewhere
    if (invocationContext() && targetType() == unknownType()) {
      return;
    }

    if (!targetType().isFunctionalInterface()) {
      error("Constructor references must target a functional interface");
      return;
    }
    InterfaceDecl iDecl = targetInterface();

    if (!iDecl.isFunctional()) {
      errorf("Interface %s is not functional and can therefore not be targeted by a constructor reference",
          iDecl.typeName());
      return;
    }

    FunctionDescriptor f = iDecl.functionDescriptor();

    if (this instanceof ClassReference) {
      ClassReference ref = (ClassReference)this;
      ConstructorDecl decl = ref.targetConstructor(f);
      if (unknownConstructor() == decl) {
        errorf("No constructor for the type %s that is compatible with the method %s in the interface %s was found",
            getTypeAccess().type().typeName(), f.method.fullSignature(), iDecl.typeName());
      }
      if (!f.method.type().isVoid()) {
        // 15.13.1
        TypeDecl returnType = ref.syntheticInstanceExpr(f).type();
        if (!returnType.assignConversionTo(f.method.type(), null)) {
          errorf("Return type of method %s in interface %s is not compatible with"
              + " referenced constructor which has return type: %s",
              f.method.fullSignature(), iDecl.typeName(), returnType.typeName());
        }
      }
      for (int i = 0; i < decl.getNumException(); i++) {
        TypeDecl exception = decl.getException(i).type();
        if (exception.isUncheckedException()) {
          continue;
        }

        boolean legalException = false;
        for (TypeDecl descriptorThrows : iDecl.functionDescriptor().throwsList) {
          if (exception.strictSubtype(descriptorThrows)) {
            legalException = true;
            break;
          }
        }
        if (!legalException) {
          // 15.13.1
          errorf("Referenced constructor %s throws unhandled exception type %s",
              decl.name(), exception.typeName());
        }
      }
      ref.syntheticInstanceExpr(f).typeCheck();
    } else {
      ArrayReference ref = (ArrayReference)this;
      if (f.method.getNumParameter() != 1) {
        errorf("Array reference not compatible with method %s in interface %s,"
            + " should have a single parameter of type int",
            f.method.fullSignature(), iDecl.typeName());
        return;
      }
      if (!f.method.getParameter(0).type().assignConversionTo(iDecl.typeInt(), null)) {
        errorf("Array reference not compatible with method %s in interface %s,"
            + " should have a single parameter of type int",
            f.method.fullSignature(), iDecl.typeName());
        return;
      }
      if (!f.method.type().isVoid()) {
        if (!getTypeAccess().type().assignConversionTo(f.method.type(), null)) {
          errorf("Return type %s of method %s in interface %s is not compatible with"
              + " the array reference type %s",
              f.method.type().typeName(), f.method.fullSignature(), iDecl.typeName(),
              getTypeAccess().type().typeName());
        }
      }
    }
  }

  refine TypeCheck
  eq MethodDecl.mayOverride(MethodDecl m) {
    // 9.4.3
    if (isDefault() && m.hostType() == type().typeObject() && !m.isPrivate()) {
      return false;
    } else {
      return returnTypeSubstitutableFor(m);
    }
  }
}

aspect LambdaParametersInference {
  inh lazy TypeDecl InferredParameterDeclaration.inferredType();
  eq InferredLambdaParameters.getParameter(int i).inferredType() {
    if (enclosingLambda().targetInterface() == null) {
      return unknownType();
    }
    InterfaceDecl iDecl = (InterfaceDecl)enclosingLambda().targetInterface();
    if (!iDecl.isFunctional()) {
      return unknownType();
    } else if (iDecl.functionDescriptor().method.getNumParameter() < i + 1) {
      return unknownType();
    } else {
      return iDecl.functionDescriptor().method.getParameter(i).type();
    }
  }
}
