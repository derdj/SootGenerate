/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Java8NameCheck {
  inh BodyDecl InferredParameterDeclaration.enclosingBodyDecl();
  inh VariableScope InferredParameterDeclaration.outerScope();
  inh VariableScope LambdaParameters.outerScope();

  //6.3
  eq LambdaExpr.getLambdaParameters().outerScope() = this;
  eq LambdaExpr.getLambdaBody().outerScope() = this;


  public void InferredParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of parameter %s", name());
    }
  }

  refine MultiCatch
  public void CatchParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of catch parameter %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of catch parameter %s", name());
    }
  }

  refine MultiCatch
  public void ParameterDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of parameter %s", name());
        }
      }
    }

    // 8.4.1
    if (!lookupVariable(name()).contains(this)) {
      errorf("duplicate declaration of parameter %s", name());
    }
  }

  refine MultiCatch
  public void VariableDeclaration.nameCheck() {
    SimpleSet decls = outerScope().lookupVariable(name());
    for (Iterator iter = decls.iterator(); iter.hasNext(); ) {
      Variable var = (Variable) iter.next();
      if (var instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) var;
        if (decl != this && decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      }
      // 8.4.1
      else if (var instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      } else if (var instanceof CatchParameterDeclaration) {
        CatchParameterDeclaration decl = (CatchParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      } else if (var instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) var;
        if (decl.enclosingBodyDecl() == enclosingBodyDecl()) {
          errorf("duplicate declaration of local variable %s", name());
        }
      }
    }
    if (getParent().getParent() instanceof Block) {
      Block block = (Block) getParent().getParent();
      for (int i = 0; i < block.getNumStmt(); i++) {
        if (block.getStmt(i) instanceof Variable) {
          Variable v = (Variable) block.getStmt(i);
          if (v.name().equals(name()) && v != this) {
            errorf("duplicate declaration of local variable %s", name());
          }
        }
      }
    }
  }

  refine NameCheck
  public void VarAccess.nameCheck() {
    if (decls().isEmpty() && (!isQualified() || !qualifier().type().isUnknown()
          || qualifier().isPackageAccess())) {
      errorf("no field named %s is accessible", name());
    }
    if (decls().size() > 1) {
      StringBuffer sb = new StringBuffer();
      sb.append("several fields named " + name());
      for (Iterator iter = decls().iterator(); iter.hasNext(); ) {
        Variable v = (Variable) iter.next();
        sb.append("\n    " + v.type().typeName() + "." + v.name() + " declared in "
            + v.hostType().typeName());
      }
      error(sb.toString());
    }

    // 8.8.5.1
    if (inExplicitConstructorInvocation() && !isQualified() && decl().isInstanceVariable()
        && hostType() == decl().hostType()) {
      errorf("instance variable %s may not be accessed in an explicit constructor invocation",
          name());
    }

    Variable v = decl();
    if (!v.isClassVariable() && !v.isInstanceVariable() && v.hostType() != hostType()
        && !v.isEffectivelyFinal()) {
      error("A parameter/variable used but not declared in an inner class must be"
          + " final or effectively final");
    }

    // 8.3.2.3
    if ((decl().isInstanceVariable() || decl().isClassVariable()) && !isQualified()) {
      if (hostType() != null && !hostType().declaredBeforeUse(decl(), this)) {
        if (inSameInitializer() && !simpleAssignment() && inDeclaringClass()) {
          BodyDecl b = closestBodyDecl(hostType());
          errorf("variable %s is used in %s before it is declared", decl().name(), b.prettyPrint());
        }
      }
    }

    if (!v.isClassVariable() && !v.isInstanceVariable() && enclosingLambda() != null) {
      if (v instanceof ParameterDeclaration) {
        ParameterDeclaration decl = (ParameterDeclaration) v;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            errorf("Parameter %s must be effectively final", v.name());
          }
        }
      } else if (v instanceof InferredParameterDeclaration) {
        InferredParameterDeclaration decl = (InferredParameterDeclaration) v;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            errorf("Parameter %s must be effectively final", v.name());
          }
        }
      } else if (v instanceof VariableDeclaration) {
        VariableDeclaration decl = (VariableDeclaration) v;
        if (decl.enclosingLambda() != enclosingLambda()) {
          // 15.27.2
          if (!decl.isEffectivelyFinal()) {
            errorf("Variable %s must be effectively final", v.name());
          }
          // 15.27.2
          if (!enclosingLambda().isDAbefore(decl)) {
            errorf("Variable %s must be definitely assigned before used in a lambda", v.name());
          }
        }
      }
    }

  }

  refine TypeCheck
  protected void TypeDecl.checkAbstractMethodDecls(MethodDecl m1, MethodDecl m2) {
    if (!m1.subsignatureTo(m2) && !m2.subsignatureTo(m1)) {
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      String inh1 = "";
      String inh2 = "";
      if (host1 != this) {
        inh1 = "inherited ";
      }
      if (host2 != this) {
        inh2 = "inherited ";
      }

      //8.4.8.3
      errorf("%smethod %s and %smethod %s are multiply declared with"
          + " the same erasure but not override-equivalent signatures in %s",
          inh1, m1.fullSignature(), inh2, m2.fullSignature(), fullName());
    }
    // DON'T FORGET TO CHECK THIS, REALLY OK TO CHECK BOTH WAYS???
    if (!m1.returnTypeSubstitutableFor(m2) && !m2.returnTypeSubstitutableFor(m1)) {
      String inh1 = "";
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      if (host1 != this || host2 != this) {
        inh1 = "inherited ";
      }

      errorf("%smethod %s is multiply declared with incompatible return types in %s",
          m1.fullSignature(), fullName());
    }
  }

  protected void TypeDecl.checkInterfaceMethodDecls(MethodDecl m1, MethodDecl m2) {
    if (m1.isAbstract() && m2.isAbstract()) {
      checkAbstractMethodDecls(m1, m2);
      return;
    } else {
      TypeDecl host1 = m1.hostType();
      TypeDecl host2 = m2.hostType();
      String inh1 = "";
      String inh2 = "";
      if (host1 != this) {
        inh1 = "inherited ";
      }
      if (host2 != this) {
        inh2 = "inherited ";
      }

      //9.4
      errorf("%smethod %s and %smethod %s are multiply declared in %s",
          inh1, m1.fullSignature(), inh2, m2.fullSignature(), fullName());
    }
  }

  refine TypeHierarchyCheck
  public void ClassDecl.nameCheck() {
    refined();
    for (Iterator<SimpleSet> iter = methodsSignatureMap().values().iterator(); iter.hasNext(); ) {
      SimpleSet set = iter.next();
      if (set.size() > 1) {
        Iterator i2 = set.iterator();
        boolean foundClassAbstract = false;
        MethodDecl foundNonAbstract = null;
        while (i2.hasNext()) {
          MethodDecl m = (MethodDecl) i2.next();
          if (!m.isAbstract()) {
            foundNonAbstract = m;
          } else {
            if (m.hostType().isClassDecl() && m.hostType() != this) {
              foundClassAbstract = true;
            }
          }
        }
        // 8.4.8.1
        if (foundNonAbstract != null && !foundClassAbstract) {
          errorf("Method %s is multiply declared in %s",
              foundNonAbstract.fullSignature(), typeName());
        }
      }
    }
  }

  refine TypeHierarchyCheck
  public void InterfaceDecl.nameCheck() {
    super.nameCheck();

    //9.6.3.8
      if (hasAnnotationFunctionalInterface() && !isFunctional()) {
        errorf("%s is not a functional interface", name());
      }

    if (isCircular()) {
      errorf("circular inheritance dependency in %s", typeName());
    } else {
      for (int i = 0; i < getNumSuperInterface(); i++) {
        TypeDecl typeDecl = getSuperInterface(i).type();
        if (typeDecl.isCircular()) {
          errorf("circular inheritance dependency in %s", typeName());
        }
      }
    }
    for (Iterator<SimpleSet> iter = methodsSignatureMap().values().iterator(); iter.hasNext(); ) {
      SimpleSet set = iter.next();
      if (set.size() > 1) {
        Iterator i2 = set.iterator();
        MethodDecl m = (MethodDecl) i2.next();
        while (i2.hasNext()) {
          MethodDecl n = (MethodDecl) i2.next();
          checkInterfaceMethodDecls(m, n);
        }
      }
    }
  }

  refine TypeHierarchyCheck
  public void SuperAccess.nameCheck() {
    if (isQualified()) {
      if (decl().isInterfaceDecl()) {
        InterfaceDecl decl = (InterfaceDecl) decl();
        if (hostType().isClassDecl()) {
          ClassDecl hostDecl = (ClassDecl) hostType();
          InterfaceDecl found = null;
          for (int i = 0; i < hostDecl.getNumImplements(); i++) {
            if (hostDecl.getImplements(i).type() == decl) {
              found = (InterfaceDecl) hostDecl.getImplements(i).type();
              break;
            }
          }
          if (found == null) {
            // 15.12.1 - fourth bullet
            errorf("Type %s is not a direct superinterface of %s",
                decl().typeName(), hostType().typeName());
            return;
          }
          InterfaceDecl foundRedundant = null;
          for (int i = 0; i < hostDecl.getNumImplements(); i++) {
            if (hostDecl.getImplements(i).type() != found && hostDecl.getImplements(i).type().strictSubtype(found)) {
              foundRedundant = (InterfaceDecl) hostDecl.getImplements(i).type();
              break;
            }
          }
          if (foundRedundant != null) {
            // 15.12.1 - fourth bullet
            errorf("Type %s cannot be used as qualifier, it is extended by implemented interface %s and is redundant",
                decl().typeName(), foundRedundant.typeName());
            return;
          }
          if (hasNextAccess() && nextAccess() instanceof MethodAccess) {
            MethodAccess methodAccess = (MethodAccess) nextAccess();
            if (hostDecl.hasOverridingMethodInSuper(methodAccess.decl())) {
              errorf("Cannot make a super reference to method %s,"
                  + " there is a more specific override",
                  methodAccess.decl().fullSignature());
            }
          }
        } else if (hostType().isInterfaceDecl()) {
          InterfaceDecl hostDecl = (InterfaceDecl) hostType();
          InterfaceDecl found = null;
          for (int i = 0; i < hostDecl.getNumSuperInterface(); i++) {
            if (hostDecl.getSuperInterface(i).type() == decl) {
              found = (InterfaceDecl) hostDecl.getSuperInterface(i).type();
              break;
            }
          }
          if (found == null) {
            // 15.12.1 - fourth bullet
            errorf("Type %s is not a direct superinterface of %s",
                decl().typeName(), hostType().typeName());
            return;
          }
          InterfaceDecl foundRedundant = null;
          for (int i = 0; i < hostDecl.getNumSuperInterface(); i++) {
            if (hostDecl.getSuperInterface(i).type() != found && hostDecl.getSuperInterface(i).type().strictSubtype(found)) {
              foundRedundant = (InterfaceDecl) hostDecl.getSuperInterface(i).type();
              break;
            }
          }
          if (foundRedundant != null) {
            // 15.12.1 - fourth bullet
            errorf("Type %s cannot be used as qualifier, it is extended by"
                + " implemented interface %s and is redundant",
                decl().typeName(), foundRedundant.typeName());
            return;
          }
          if (hasNextAccess() && nextAccess() instanceof MethodAccess) {
            MethodAccess methodAccess = (MethodAccess) nextAccess();
            if (hostDecl.hasOverridingMethodInSuper(methodAccess.decl())) {
              errorf("Cannot make a super reference to method %s,"
                  + " there is a more specific override",
                  methodAccess.decl().fullSignature());
            }
          }
        } else {
          error("Illegal context for super access");
        }

        if (nextAccess() instanceof MethodAccess) {
          if (((MethodAccess) nextAccess()).decl().isStatic()) {
            error("Cannot reference static interface methods with super");
          }
        }

        if (!hostType().strictSubtype(decl())) {
          errorf("Type %s is not a superinterface for %s",
              decl().typeName(), hostType().typeName());
        }
      } else if (!hostType().isInnerTypeOf(decl()) && hostType() != decl()) {
        error("qualified super must name an enclosing type");
      }
      if (inStaticContext()) {
        error("*** Qualified super may not occur in static context");
      }
    }
    // 8.8.5.1
    // JLSv7 8.8.7.1
    TypeDecl constructorHostType = enclosingExplicitConstructorHostType();
    if (constructorHostType != null && (constructorHostType == decl())) {
      error("super may not be accessed in an explicit constructor invocation");
    }
    // 8.4.3.2
    if (inStaticContext()) {
      error("super may not be accessed in a static context");
    }
  }

  refine NameCheck
  eq MethodAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
        return true;
  }

  refine NameCheck
  eq ConstructorAccess.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  refine NameCheck
  eq ClassInstanceExpr.validArgs() {
    for (int i = 0; i < getNumArg(); i++) {
      if (!getArg(i).isPolyExpression() && getArg(i).type().isUnknown()) {
        return false;
      }
    }
    return true;
  }

  public void MethodReference.nameCheck() {
    for (int i = 0; i < getNumTypeArgument(); i++) {
      if (getTypeArgument(i) instanceof AbstractWildcard) {
        error("Wildcard not allowed in method reference type argument lists");
        break;
      }
    }
  }

  public void ExprMethodReference.nameCheck() {
    super.nameCheck();
    if (!getExpr().isSuperAccess()) {
      if (!getExpr().type().isReferenceType()) {
        error("Expression in a method reference must have reference type");
      }
    }
  }

  public void ClassReference.nameCheck() {
    for (int i = 0; i < getNumTypeArgument(); i++) {
      if (getTypeArgument(i) instanceof AbstractWildcard) {
        error("Wildcard not allowed in constructor reference type argument lists");
        break;
      }
    }
  }

  public void ArrayReference.nameCheck() {
    Access typeAccess = getTypeAccess();
    while (typeAccess instanceof ArrayTypeAccess) {
      typeAccess = ((ArrayTypeAccess) typeAccess).getAccess();
    }
    if (typeAccess instanceof ParTypeAccess) {
      error("Cannot create array of generic type");
    }
  }

  public void DeclaredLambdaParameters.nameCheck() {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).name().equals("_")) {
        // 15.27.1
        error("Underscore is not a valid identifier for a lambda parameter");
        return;
      }
    }
  }

  public void InferredLambdaParameters.nameCheck() {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).name().equals("_")) {
        // 15.27.1
        error("Underscore is not a valid identifier for a lambda parameter");
        return;
      }
    }
  }
}
