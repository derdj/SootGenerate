/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Transformations {
  public void LambdaExpr.transformation() {
    toClass().transformation();
  }

  public void ExprMethodReference.transformation() {
    toClass().transformation();
  }

  public void TypeMethodReference.transformation() {
    toClass().transformation();
  }

  public void ConstructorReference.transformation() {
    toClass().transformation();
  }

  // TEMPORARY REFINE TO PREVENT SUPERACCESSORS FROM BEING CREATED WHEN INTERFACE IS THE QUALIFIER
  refine VariableArityParametersCodegen
  public void MethodAccess.transformation() {
    if (decl().isVariableArity() && !invokesVariableArityAsArray()) {
      // arguments to normal parameters
      List list = new List();
      for (int i = 0; i < decl().getNumParameter() - 1; i++)
        list.add(getArg(i).treeCopyNoTransform());
      // arguments to variable arity parameters
      List last = new List();
      for (int i = decl().getNumParameter() - 1; i < getNumArg(); i++)
        last.add(getArg(i).treeCopyNoTransform());
      // build an array holding arguments
      Access typeAccess = decl().lastParameter().type().elementType().createQualifiedAccess();
      for (int i = 0; i < decl().lastParameter().type().dimension(); i++)
        typeAccess = new ArrayTypeAccess(typeAccess);
      list.add(new ArrayCreationExpr(typeAccess, new Opt(new ArrayInit(last))));
      // replace argument list with augemented argument list
      setArgList(list);
    }
    MethodDecl m = decl();


    /*if (!isQualified() && !m.isStatic()) {
      TypeDecl typeDecl = hostType();
      while (typeDecl != null && !typeDecl.hasMethod(name())) {
        typeDecl = typeDecl.enclosingType();
      }
      ASTNode result = this.replaceWith(typeDecl.createQualifiedAccess().qualifiesAccess(new ThisAccess("this")).qualifiesAccess(new MethodAccess(name(), getArgList())));
      result.transformation();
      return;
    }*/

    if (requiresAccessor()) {
      /* Access to private methods in enclosing types:
      The original MethodAccess is replaced with an access to an accessor method
      built by createAccessor(). This method is built lazily and differs from
      normal MethodDeclarations in the following ways:
      1) The method in the class file should always be static and the signature
         is thus changed to include a possible this reference as the first argument.
      2) The method is always invoked using INVOKESTATIC
      3) The flags must indicate that the method is static and package private
      */
      super.transformation();
      this.replaceWith(decl().createAccessor(methodQualifierType()).createBoundAccess(getArgList()));
      return;
    } else if (!m.isStatic() && isQualified()
        && prevExpr().isSuperAccess()
        && !hostType().instanceOf(prevExpr().type())
        && !prevExpr().type().isInterfaceDecl()) {
      decl().createSuperAccessor(superAccessorTarget());
    }
    super.transformation();
  }
}
