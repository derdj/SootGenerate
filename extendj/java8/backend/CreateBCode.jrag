/* Copyright (c) 2014, Erik Hogeman <Erik.Hogemn@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
aspect Java8CreateBCode {
  public void LambdaExpr.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void ExprMethodReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void TypeMethodReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  public void ConstructorReference.createBCode(CodeGeneration gen) {
    toClass().createBCode(gen);
  }

  refine CreateBCode
  public void SuperAccess.createBCode(CodeGeneration gen) {
    if (decl().isInterfaceDecl()) {
      emitThis(gen, hostType());
    } else {
      emitThis(gen, decl());
    }
  }

  // TEMPORARY REFINE TO PREVENT SUPERACCESSORS FROM BEING CREATED WHEN INTERFACE IS THE QUALIFIER
  refine GenericsCodegen
  public void MethodAccess.createBCode(CodeGeneration gen) {
    MethodDecl decl = decl().erasedMethod();
    createLoadQualifier(gen);

    if (program().options().hasOption("-debug")) {
      if (decl.type().isUnknown()) {
        System.err.println("Could not bind " + this);
        for (int i = 0; i < getNumArg(); ++i) {
          System.err.println("Argument " + getArg(i)
              + " is of type " + getArg(i).type().typeName());
          if (getArg(i).varDecl() != null) {
            System.err.println(getArg(i).varDecl() + " in "
                + getArg(i).varDecl().hostType().typeName());
          }
        }
        if (isQualified()) {
          System.err.println("Qualifier " + qualifier()
              + " is of type " + qualifier().type().typeName());
        }
        throw new Error("Could not bind " + this);
      }
      if (decl.getNumParameter() != getNumArg()) {
        System.out.println(this
            + " does not have the same number of arguments as " + decl);
      }
    }

    for (int i = 0; i < getNumArg(); ++i) {
      getArg(i).createBCode(gen);
      // the cast or boxing/unboxing operation must know the bound rather than the erased type
      getArg(i).type().emitCastTo(gen, decl().getParameter(i).type()); // MethodInvocationConversion
    }

    if (!decl.isStatic() && isQualified() && prevExpr().isSuperAccess()) {
      if (!hostType().instanceOf(prevExpr().type()) && !prevExpr().type().isInterfaceDecl()) {
        /* should this be decl instead? possible copy/paste error? */
        decl().createSuperAccessor(superAccessorTarget()).emitInvokeMethod(gen, superAccessorTarget());
      } else {
        decl.emitInvokeSpecialMethod(gen, methodQualifierType());
      }
    } else {
      decl.emitInvokeMethod(gen, methodQualifierType());
    }

    if (decl.type() != decl().type()) {
      gen.emitCheckCast(decl().type());
    }
  }
}
