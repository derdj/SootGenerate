/* Copyright (c) 2015, Jesper Ã–qvist <jesper.oqvist@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Attributes for checking if a type argument is within the bounds of a given
 * type variable.
 */
aspect GenericBoundCheck {
  /**
   * @param bound the bounded type variable
   * @param par a parameterization of the type for which the type variable
   * occurs in the type parameter list
   * @return {@code true} if this type is within the bounds of the parameter type
   */
  syn boolean TypeDecl.withinBounds(TypeDecl bound, Parameterization par) =
      bound.boundOf(this, par);

  eq UnknownType.withinBounds(TypeDecl bound, Parameterization par) = false;

  eq WildcardType.withinBounds(TypeDecl bound, Parameterization par) = true;
  eq WildcardExtendsType.withinBounds(TypeDecl bound, Parameterization par) =
      bound.boundOf(extendsType(), par) || extendsType().boundOf(bound, par);
  eq WildcardSuperType.withinBounds(TypeDecl bound, Parameterization par) =
      bound.boundOf(superType(), par);

  /**
   * Check if a type is in the bound of this type, given a specific
   * parameterization of this type.
   *
   * See JLS SE7 $4.5
   *
   * @param argument argument type
   * @param par a parameterization
   * @return {@code true} if the argument type is in the bound of this type
   */
  syn boolean TypeDecl.boundOf(TypeDecl argument, Parameterization par) = false;

  eq TypeVariable.boundOf(TypeDecl argument, Parameterization par) {
    for (int i = 0; i < getNumTypeBound(); ++i) {
      TypeDecl bound = getTypeBound(i).type();
      if (bound.usesTypeVariable()) {
        Access substituted = bound.substitute(par);
        substituted.setParent(this);
        bound = substituted.type();
      }
      if (!argument.subtype(bound)) {
        return false;
      }
    }
    return true;
  }

  syn boolean TypeDecl.boundOfWildcard(WildcardType type) = false;
  eq TypeVariable.boundOfWildcard(WildcardType type) = true;

  syn boolean TypeDecl.boundOfWildcardExtends(WildcardExtendsType type) = false;
  eq TypeVariable.boundOfWildcardExtends(WildcardExtendsType type) =
      type.extendsType().subtype(this);

  syn boolean TypeDecl.boundOfWildcardSuper(WildcardSuperType type) = false;
  eq TypeVariable.boundOfWildcardSuper(WildcardSuperType type) =
      type.superType().subtype(this);
}

